<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于BLE的多节点AoA室内定位</title>
      <link href="/2020/04/22/BLE-Localization/"/>
      <url>/2020/04/22/BLE-Localization/</url>
      
        <content type="html"><![CDATA[<h2 id="AOA定位原理"><a href="#AOA定位原理" class="headerlink" title="AOA定位原理"></a>AOA定位原理</h2><p>AOA（Arrival of Angle）定位方法是通过计算目标发射的信号到达AP(Access Point)的角度，根据到达的角度可以推测出以基站为起点的射线的斜率，射线必定经过目标点，由两个或者两个以上的基站便可以得到目标的位置。<br><img src="https://img-blog.csdnimg.cn/20200414101908328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RyZWFtZXJoYW4=,size_16,color_FFFFFF,t_70#pic_center" width="40%"></p><p>在二维平面上，如图1-4所示，AP装有天线阵列，天线阵列可以通过算法计算出发送信号到达接收天线的角度，信号到达两个AP的角度分别为$\alpha 1$和$\alpha 2$，AP的坐标位置已知，（x1，y1），（x2，y2），目标的坐标位置未知（x，y），则根据三角函数可知：<br><img src="https://img-blog.csdnimg.cn/20200414102648435.png#pic_center" width="40%"><br><img src="https://img-blog.csdnimg.cn/20200414102746898.png#pic_center" width="50%"></p><h2 id="节点空间部署"><a href="#节点空间部署" class="headerlink" title="节点空间部署"></a>节点空间部署</h2><p>使用一个Master(CC26x2R LaunchPad),以及一个Slave(CC26x2R LaunchPad)，三个Passive(CC26x2R LaunchPad+BOOSTXL-AOA)，其中Passive端和Master端作为接受端，由于只有Passive端安装了外置天线，所以只有Passive端才会计算AoA，Slave充当发送端。由于CC26x2R开发版的内置天线是线极化的，所以在节点空间部署上要注意接受端的摆放位置，推荐摆放位置：<br><img src="https://img-blog.csdnimg.cn/20200414110934281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RyZWFtZXJoYW4=,size_60,color_000000,t_70#pic_center" width="70%"></p><h2 id="实验关键参数设置"><a href="#实验关键参数设置" class="headerlink" title="实验关键参数设置"></a>实验关键参数设置</h2><p>在SDK中可以通过 <code>/tools/ble5stack/rtls_agent/example/rtls_example_with_rtls_util.py</code>来设置实验的一些关键参数，比如天线阵列的选择以及天线的根数。然后通过可视化前端就可以看到数据的变化。</p><h2 id="IQ数据"><a href="#IQ数据" class="headerlink" title="IQ数据"></a>IQ数据</h2><p>如果想使用开发板拿到无线信号的IQ数据来进行信号分析，可以使用<code>/tools/ble5stack/rtls_agent/example/rtls_aoa_iq_with_rtls_util_export_into_csv.py</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC26x2R </tag>
            
            <tag> RTLS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于SimpleLink CC26x2R LaunchPad的AoA角度误差测量</title>
      <link href="/2020/04/14/cc26x2r-aoa/"/>
      <url>/2020/04/14/cc26x2r-aoa/</url>
      
        <content type="html"><![CDATA[<p>在上一篇博客中(<a href="https://blog.csdn.net/dreamerhan/article/details/105248944" target="_blank" rel="noopener">https://blog.csdn.net/dreamerhan/article/details/105248944</a>)，我介绍了如何基于SimpleLink CC26x2R LaunchPad来进行定位系统的搭建，并如何运行可视化demo。但在Demo运行后，AoA是固定的值，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200413221046260.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RyZWFtZXJoYW4=,size_80,color_000000,t_70#pic_center" style="zoom:30%;"></p><p>这是因为我们使用的Passive使用的是内置单天线，所以计算得到的角度只是一个固定值。<strong>本章节，我将介绍如何利用CC26XR开发板来进行AoA测量。</strong></p><p>按照<a href="https://blog.csdn.net/dreamerhan/article/details/105248944" target="_blank" rel="noopener">https://blog.csdn.net/dreamerhan/article/details/105248944</a>配置好Master, Slave, Passive节点。CC26xR开发版烧录对应的程序就可以充当Master，Slave端，Passive端除了烧录对应的程序之外，还需要将开发板上的C51电容切换至外置天线连接点，如下图。<br><img src="https://img-blog.csdnimg.cn/20200413211509783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RyZWFtZXJoYW4=,size_40,color_000000,t_70#pic_center" style="zoom:30%;"><br>然后将BOOSTXL-AoA上的JSC连接口连接到已配置好外置天线开关的开发版上，然后将BOOSTXL-AoA上的引脚与CC26x2R开发版上的引脚连接。<br><img src="https://img-blog.csdnimg.cn/20200413212657380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RyZWFtZXJoYW4=,size_60,color_000000,t_70#pic_center," style="zoom:33%;"><br><img src="https://img-blog.csdnimg.cn/20200414090519970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RyZWFtZXJoYW4=,size_60,color_000000,t_70#pic_center," style="zoom:33%;"><br>以上就是我们的准备工作，接下来开始进入有趣的步骤。</p><h2 id="AoA测量"><a href="#AoA测量" class="headerlink" title="AoA测量"></a>AoA测量</h2><p>TI官网上下载的SDK中，有三种计算AoA的模式：仅Passive端提供AoA测量，仅Master端提供AoA测量，Passive和Master端都提供AoA测量。这里我们选择仅Passive端提供AoA测量。（因为小编手里目前只有一个BOOSTXL-AOA）。需要对代码进行修改，具体修改方式，见官网说明<a href="http://dev.ti.com/tirex/explore/node?node=AHYhhuDNTaRXzkOlahOlvA__pTTHBmu__LATEST" target="_blank" rel="noopener">http://dev.ti.com/tirex/explore/node?node=AHYhhuDNTaRXzkOlahOlvA__pTTHBmu__LATEST</a>。 </p><p><strong>需要注意的是，如果我们想直接利用TI官方SDK提供的Demo，需要也将<code>rtls_master</code>中的<code>main.c</code>的<code>rtlsConfig.rtlsCapab</code>字段也添加<code>RTLS_CAP_AOA_RX</code>. 否则，在运行Demo时，会提示<code>Warring ! One of the device not supporting AOA functionality</code>，最后的结果就是一直收不到AoA packet。</strong></p><p>然后将节点放置在离地面高1m的平台上，这样做的目的是减小多径和信号的衰减。为了增加测量结果的准确度，建议节点要放在等高的位置上，否则会在三维上产生误差，也要保证节点之间没有遮挡物和发射物。<br><img src="https://img-blog.csdnimg.cn/2020041322001427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RyZWFtZXJoYW4=,size_40,color_000000,t_70#pic_center, =500x250" style="zoom:50%;"></p><p>之后，在终端运行：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /Applications/ti/simplelink_cc13x2_26x2_sdk_3_40_00_02/tools/ble5stack/rtls_agent/rtls_ui<span class="token function">chmod</span> 777 rtls_ui_macosrtls_ui_macos</code></pre><p>便可以观察到在Passive端计算得到的AoA测量值。</p><p>如果想让测量精度更高，可以改变接受端(Passive)天线的朝向，当天线阵列垂直发送端和接收端连线的时候，测量精度更高。修改天线朝向时，要注意使用的是天线阵列1还是天线阵列2。<br><img src="https://img-blog.csdnimg.cn/20200413221824713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RyZWFtZXJoYW4=,size_20,color_000000,t_70#pic_center," style="zoom:100%;"></p><h2 id="天线的选择"><a href="#天线的选择" class="headerlink" title="天线的选择"></a>天线的选择</h2><p>BOOSTXL-AOA天线有两个相互正交的天线阵列，但是两个天线阵列不能同时工作，框图如下，<br><img src="https://img-blog.csdnimg.cn/20200413222612965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RyZWFtZXJoYW4=,size_16,color_FFFFFF,t_70#pic_center, =600x300," style="zoom:50%;"><br>由框图可以看出，U1开关在同一时刻，只能选择DIO27-1引脚或者DIO27-0引脚，同时，从框图中，我们还可以得出，在同一个天线阵列的三根天线，也不是同时接收信号，所以会存在一个天线切换，这一点将在下一篇文章中提及。各个引脚控制逻辑如下：<br><img src="https://img-blog.csdnimg.cn/20200413222820604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RyZWFtZXJoYW4=,size_16,color_FFFFFF,t_70#pic_center, =300x200," style="zoom:50%;"><br>用户也可以直接修改<code>/Applications/ti/simplelink_cc13x2_26x2_sdk_3_40_00_02/tools/ble5stack/rtls_agent/examples/rtls_example_with_rtls_util.py</code>中的以下字段：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token string">"aoa_cc26x2"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"aoa_slot_durations"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"aoa_sample_rate"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"aoa_sample_size"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"aoa_sampling_control"</span><span class="token operator">:</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token string">'0x10'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        ## bit <span class="token number">0</span>   <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">-</span> <span class="token keyword">default</span> filtering<span class="token punctuation">,</span> <span class="token number">0x01</span> <span class="token operator">-</span> RAW_RF no filtering<span class="token punctuation">,</span>        ## bit <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0x10</span> <span class="token operator">-</span> ONLY_ANT_1<span class="token punctuation">,</span> optional<span class="token operator">:</span> <span class="token number">0x20</span> <span class="token operator">-</span> ONLY_ANT_2        <span class="token string">"aoa_sampling_enable"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"aoa_pattern_len"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"aoa_ant_pattern"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span></code></pre><p>在SDK3.30版本中，字段有所不同，但是大同小异，</p><pre class=" language-cpp"><code class="language-cpp"><span class="token string">"aoa_cc26x2"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"aoa_slot_durations"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>         <span class="token string">"aoa_sample_rate"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>         <span class="token string">"aoa_sample_size"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>         <span class="token string">"aoa_sampling_control"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//1: antenna array 1; 0: antenna array 2;</span>         <span class="token string">"aoa_sampling_enable"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>         <span class="token string">"aoa_num_of_ant"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>         <span class="token string">"aoa_ant_array_switch"</span><span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span>         <span class="token string">"aoa_ant_array"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//三根天线的引脚号</span>                    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC26x2R </tag>
            
            <tag> RTLS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CC26x2R LaunchPad的RTLS系统搭建</title>
      <link href="/2020/03/26/SimpleLink-CC26x2R-Launchpad-RTLS/"/>
      <url>/2020/03/26/SimpleLink-CC26x2R-Launchpad-RTLS/</url>
      
        <content type="html"><![CDATA[<h2 id="一、硬件需求-amp-软件环境"><a href="#一、硬件需求-amp-软件环境" class="headerlink" title="一、硬件需求 &amp; 软件环境"></a>一、硬件需求 &amp; 软件环境</h2><ul><li>SimpleLink CC26x2R LaunchPad  x 3, BOOSTXL-AoA x 1;</li><li>SimpleLink CC13x2/26x2 SDK ver.3.40;</li><li>Python 3.7+;</li><li>Code Composer Studio （CCS）ver.9.2.0.0;</li><li>Uniflash ver.5.3.1;</li><li>TICloudAgent（安装CCS时就会自动安装）;</li></ul><p>CC26x2R开发版是基于蓝牙低功耗5.1技术进行定位，用户可以从开发板中提取到AoA、ToF信息，AoA和ToF定位原理可以参考官网说明<a href="http://dev.ti.com/tirex/explore/node?node=AHYhhuDNTaRXzkOlahOlvA__pTTHBmu__LATEST" target="_blank" rel="noopener">http://dev.ti.com/tirex/explore/node?node=AHYhhuDNTaRXzkOlahOlvA__pTTHBmu__LATEST</a>，或者其他一些无线技术定位文章。本文基于MacOS进行搭建，Windows环境会有一定的差异。另外，不同版本的SDK在使用的过程中，也会有一些差异。</p><h3 id="硬件：SimpleLink-CC26x2R-LaunchPad-amp-amp-BOOSTXL-AoA"><a href="#硬件：SimpleLink-CC26x2R-LaunchPad-amp-amp-BOOSTXL-AoA" class="headerlink" title="硬件：SimpleLink CC26x2R LaunchPad &amp;&amp; BOOSTXL-AoA"></a>硬件：SimpleLink CC26x2R LaunchPad &amp;&amp; BOOSTXL-AoA</h3><p><img src="1.png" alt></p><p>CC26x2R开发板在RTLS（Real-time Locating System）系统中充当定位节点，本身就内置单根天线，但是单天线的节点不足以满足RTLS的定位需求，所以需要将开发版外接BOOSTXL-AoA，以达到扩展节点天线数目的目的。</p><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p>1、配置Python 3.7环境，教程：<a href="https://pythonguidecn.readthedocs.io/zh/latest/starting/install3/osx.html" target="_blank" rel="noopener">https://pythonguidecn.readthedocs.io/zh/latest/starting/install3/osx.html</a>, 如果下载缓慢，可以为homebrew配置国内镜像如：阿里云、中科大等。</p><p>2、下载SimpleLink CC13x2/26x2 SDK，需要注册TI账号，注册完成后即可下载，下载之前，TI会询问你SDK的用途，选择民用Civil即可。下载地址：<a href="http://www.ti.com/tool/download/SIMPLELINK-CC13X2-26X2-SDK" target="_blank" rel="noopener">http://www.ti.com/tool/download/SIMPLELINK-CC13X2-26X2-SDK</a>.</p><p>3、Code Composer Studio （CCS），下载地址：<a href="https://software-dl.ti.com/ccs/esd/documents/ccs_downloads.html" target="_blank" rel="noopener">https://software-dl.ti.com/ccs/esd/documents/ccs_downloads.html</a>, 如果是在MacOS上进行开发，建议下载9.20版本，原因后面解释。</p><p>4、Uniflash，下载地址<a href="http://www.ti.com/tool/UNIFLASH" target="_blank" rel="noopener">http://www.ti.com/tool/UNIFLASH</a>.  </p><h2 id="二、RTLS"><a href="#二、RTLS" class="headerlink" title="二、RTLS"></a>二、RTLS</h2><h3 id="1、RTLS系统框架"><a href="#1、RTLS系统框架" class="headerlink" title="1、RTLS系统框架"></a>1、RTLS系统框架</h3><p><img src="2.png" alt></p><p>定位系统包含4部分：Node Manager，Master，Slave，Passive。Node Manager是运行在PC端的软件（第四小节第五小节介绍），CC26x2R开发板扮演Master，Slave，Passive角色（第二小节介绍）。</p><p>关于Master，Slave，Passive详细介绍可以参照官网说明，以下只做简要的介绍：</p><p>&#10084; <strong>Master</strong></p><ul><li><p>与Slave端建立连接，并且讲连接链路的参数（地址信息，时钟精度，CRC等）传递给PC端。</p></li><li><p>与外围设备通过BLE链路分享AoA参数。</p></li><li><p>进行I/Q采样。</p></li><li><p>向Slave端发送指令，使得Slave端发送AoA packets。</p></li></ul><p>&#10003; <strong>Slave</strong></p><ul><li>在BLE协议中扮演外围设备。</li><li>通过CTE发送AoA packets到Master端。</li></ul><p>&#9728; <strong>Passive</strong></p><ul><li>可以通过CTE接收数据包，进行I/Q采样。</li><li>监听Master和Slave之间的连接链路。</li></ul><h3 id="2、硬件程序编译"><a href="#2、硬件程序编译" class="headerlink" title="2、硬件程序编译"></a>2、硬件程序编译</h3><p>打开CCS，分别导入已经下载好的SDK（simplelink_cc13x2_26x2_sdk_3_40_00_02/examples/rtos/CC26X2R1_LAUNCHXL/ble5stack/）中的<code>rtls_master</code>, <code>rtls_passive</code>,<code>rtls_slave</code> 三个例程。</p><p><img src="3.png" alt></p><p>编译完成之后，在工程文件夹目录下的Debug目录下，会生成.out和.hex的文件，这两个文件选其一即可，使用UniFlash烧录到硬件中。</p><h3 id="3、程序烧录"><a href="#3、程序烧录" class="headerlink" title="3、程序烧录"></a>3、程序烧录</h3><p>将Boards通过USB串口连接到PC端，UniFlash会自动检测到设备以及相应的端口号，然后start，找到刚刚生成的.out文件，Load Image完成烧录。（依次将<code>rtls_master</code>, <code>rtls_passive</code>,<code>rtls_slave</code> 三个例程编译产生的.out文件烧录到Boards中）</p><p><img src="5.png" alt></p><p><img src="6.png" alt></p><h3 id="4、运行可视化-Demo"><a href="#4、运行可视化-Demo" class="headerlink" title="4、运行可视化 Demo"></a>4、运行可视化 Demo</h3><p>TI在最新的SDK中为开发者提供了可视化的UI界面，使得开发更加友好。TI也保留了以前的命令行操作，对于我这种小白来说，一开始入手，还是先选择可视化的UI界面。</p><p>在终端中输入以下指令：</p><p><code>cd /Applications/ti/simplelink_cc13x2_26x2_sdk_3_40_00_02/tools/ble5stack/rtls_agent/rtls_ui</code> </p><p><code>chmod 777 rtls_ui_macos</code></p><p><code>rtls_ui_macos</code></p><p>运行后，在电脑的默认浏览器中就会打开UI界面：</p><p><img src="9.png" alt></p><p>系统并没有识别出开发板，并且显示开发板不可用”N/A”。这是因为我们在使用CCS编译程序时，CCS会自动检测并更新XDS110固件的版本，打开终端，输入如下指令：</p><p><code>cd /Applications/ti/ccs920/ccs/ccs_base/common/uscif/xds110</code></p><p><code>xdsdfu -e</code></p><p><img src="10.png" alt></p><p>使用xdsdfu工具查看固件版本是3.0.0.7，这个问题困扰了我很久，我在TI E2E论坛上找到了类似问题<a href="https://e2e.ti.com/support/wireless-connectivity/bluetooth/f/538/p/875870/3243366" target="_blank" rel="noopener">https://e2e.ti.com/support/wireless-connectivity/bluetooth/f/538/p/875870/3243366</a>，我推测这个问题是和操作系统以及固件版本有关。在Windows上，开发板的固件版本即使在3.0.0.7，也依然可以被系统识别；但是在MacOS上，最新的固件版本则不可以支持，所以需要讲固件版本恢复到之前的老版本，所以这也为什么是在开头的时候，我建议大家下载CCS9.2，而不是下载最新的CCS，在CCS9.2中，我们可以使用xdsdfu工具将固件恢复到3.0.0.5。</p><p><code>xdsdfu -m</code></p><p><code>xdsdfu -f firmware.bin -r</code></p><p>然后再使用<code>xdsdfu -e</code> 来查看现在的固件版本，</p><p><img src="11.png" alt></p><p>之后，重新运行可视化命令，Get Start后，自动识别PC连接的开发板，并显示开发板的属性：</p><p><img src="8.png" alt></p><h3 id="5、运行非可视化Demo"><a href="#5、运行非可视化Demo" class="headerlink" title="5、运行非可视化Demo"></a>5、运行非可视化Demo</h3><p>a、创建python虚拟环境</p><p><code>cd /Applications/ti/simplelink_cc13x2_26x2_sdk_3_40_00_02/tools/ble5stack/rtls_agent/</code></p><p><code>python3 -m venv .venv</code></p><p>在当前目录下，新建了一个.venv文件，此文件是隐藏文件夹，使用快捷键”shift+command+.”查看。</p><p><code>source .venv/bin/activate</code></p><p>然后，打开package.sh，将第三行的代<code>PYTHON3=python3.7</code>修改为<code>PYTHON3=python</code></p><p>在终端继续运行以下命令：</p><p><code>package.sh -c -b -u -i</code></p><p>然后在当前目录下新建requirements.txt，</p><p>打开txt，输入以下内容，</p><p><code>construct==2.9.45 websockets==7.0 pyserial==3.4</code></p><p>requirements.txt存储的是python的外部依赖包名称，然后使用pip进行安装，</p><p><code>python -m pip install -r requirements.txt</code></p><p>这里，如果下载失败，就重新下载几次，直到成功为止。</p><p>打开examples目录下的rtls_example_with_rtls_util.py文件，找到定义设备端口号的地方，并修改</p><pre class=" language-python"><code class="language-python">devices <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span><span class="token string">"com_port"</span><span class="token punctuation">:</span> <span class="token string">"/dev/cu.usbmodemL1100ABP1"</span><span class="token punctuation">,</span> <span class="token string">"baud_rate"</span><span class="token punctuation">:</span> <span class="token number">460800</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"CC26x2 Master"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">"com_port"</span><span class="token punctuation">:</span> <span class="token string">"/dev/cu.usbmodemL1100ADL1"</span><span class="token punctuation">,</span> <span class="token string">"baud_rate"</span><span class="token punctuation">:</span> <span class="token number">460800</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"CC26x2 Passive"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span></code></pre><p>然后，在终端中继续运行以下指令：</p><p><code>python -u examples/rtls_example_with_rtls_util.py</code></p><p>然后，可以在终端中就可以查看打印的日志信息了。</p><h2 id="三、TI-Cloud"><a href="#三、TI-Cloud" class="headerlink" title="三、TI Cloud"></a>三、TI Cloud</h2><p>CCS+SDK+UniFlash一共大约3.5G，并且CCS编译程序时所占用的内存资源很大，如果有同学电脑存储资源有限，不想下载这么大的开发工具，可以选择TI Cloud云开发工具，集成了CCS，UniFlash等开发工具以及Resource Explorer等资源库，可以满足一些基本的硬件开发。详见<a href="https://dev.ti.com/" target="_blank" rel="noopener">https://dev.ti.com/</a>. </p><hr><p>关于开发板的其他功能开发，将在后面章节会继续详解。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC26x2R </tag>
            
            <tag> RTLS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot学习笔记1：使用IntelliJ IDEA创建基于Spring Boot的Maven项目</title>
      <link href="/2020/03/20/Spring-boot-basedon-maven/"/>
      <url>/2020/03/20/Spring-boot-basedon-maven/</url>
      
        <content type="html"><![CDATA[<h2 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h2><ul><li>IntelliJ IDEA ver2019.3.2 （money购买正版/高校邮箱免费申请使用/破解工具/30天免费使用）</li><li>Maven ver3.6.3</li><li>Spring Boot ver2.2.4 Release</li><li>Java SE JDK ver13.3.2</li></ul><h2 id="2、创建Maven项目"><a href="#2、创建Maven项目" class="headerlink" title="2、创建Maven项目"></a>2、创建Maven项目</h2><p>1、关于IDEA的个人化配置，可以参照<a href="https://blog.csdn.net/m_m254282520/article/details/78900238" target="_blank" rel="noopener">https://blog.csdn.net/m_m254282520/article/details/78900238</a></p><p>2、打开IntelliJ IDEA-&gt; Create New Project。</p><p>3、Maven-&gt;Project SDK-&gt;Create from archetype-&gt;webapp：</p><p><img src="1.png" alt></p><p>4、设置name, groupID, artifactID，如果有需要的话可以自定义User settings file和Local respository路径，这里的路径都是默认的路径，setting.xml是maven的配置文件，local repository存储的是项目所依赖的所有jar包。当项目所依赖的包不在local repository中，IDEA会自动下载依赖包到local repository中，可以理解为一个公共的资源池，对于所有新建的maven项目共享资源池中的资源。然后一路傻瓜式操作即可。</p><p><img src="2.png" alt></p><p><img src="3.png" alt></p><p>环境配置</p><p>5、创建完毕后，需要加在所需的依赖包，但是有时候会存在依赖包久久不能下载成功的现象，之前我下了一个下午，一直没能下载成功，可能是因为这些资源有部分需要连接到国外的资源网站进行下载，所以带宽被限制。解决方法是，打开project structure-&gt;Maven-&gt;open settings.xml </p><p><img src="4.png" alt></p><p>添加以下代码，使用阿里云镜像来进行下载所依赖的jar包。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span></code></pre><p>由于这里修改的是IDEA内置的Maven框架的全局settings配置文件，所以以后再使用IDEA创建新项目，下载依赖包时都可以体验飞起的感觉。如果要使用外置的Maven框架，则需要重新执行步骤5。</p><p>6、打开pom.xml，添加所需要的包依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>添加完毕，重新加载，双击项目，project structure-&gt;maven-&gt;reimport。</p><p>在左侧项目结构src-&gt;main中添加java文件夹，创建完毕后，双击java文件夹，选择Mark Directory AS，设置Sources Root，这一步骤是要告诉IDEA，这个文件夹下所包含的文件，在构建工程时，需要作为一部分编译进去。</p><p>左侧项目结构src-&gt;main中添resource文件夹，同样，选择Mark Directory AS，设置Resources Root，表示这是应用所依赖的资源文件。</p><p>之后，在java目录下，创建package：com.springbootcourse.springbootcourse1。在新建的package目录下，创建SpringbootCourse1.java，@SpringBootApplication是表示这个类为项目的启动类。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootCourse1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootCourse1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在package目录下创建controller文件夹，并在其目录下新建HelloController.java，关于@RequestMapping注解的相关知识，可以参考：<a href="https://www.oschina.net/translate/using-the-spring-requestmapping-annotation" target="_blank" rel="noopener">https://www.oschina.net/translate/using-the-spring-requestmapping-annotation</a></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World! haha"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行上述操作后，项目架构如下图所示：</p><p><img src="5.png" alt></p><p>7、编辑启动配置，上方菜单栏中run-&gt;edit configurations,</p><p><img src="6.png" alt></p><p><img src="7.png" alt></p><p>8、大功告成，运行项目，</p><p><img src="8.png" alt></p><p><img src="9.png" alt></p><p><img src="10.png" alt></p><p>在浏览器端打开<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 检查是否出现”Hello World! haha”字符。</p><h2 id="3、其他"><a href="#3、其他" class="headerlink" title="3、其他"></a>3、其他</h2><p>1、如果在编译过程中，出现端口被占用的情况，如下所示：</p><p><img src="11.png" alt></p><p>打开终端，输入<code>lsof -i tcp:8080</code>，查看8080端口是否被占用，然后根据PID(进程id)杀掉占有的进程即可，然后重新运行。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Maven </tag>
            
            <tag> IntelliJ IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>艺术</title>
      <link href="/2019/12/14/note20191214/"/>
      <url>/2019/12/14/note20191214/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="输入密码，查看文章" />    <label for="pass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Honey Happy Happy</title>
      <link href="/2019/12/01/guarantee-for-myhappy/"/>
      <url>/2019/12/01/guarantee-for-myhappy/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="输入密码，查看文章" />    <label for="pass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSI误差(SFO+CFO+PDD+etc...)简介</title>
      <link href="/2019/11/02/error-of-CSI/"/>
      <url>/2019/11/02/error-of-CSI/</url>
      
        <content type="html"><![CDATA[<p>近期由于文章和任务需要，需要对CSI测量的误差进行分析，借鉴了几篇目前顶刊文章，进行了一个简单的整理。这里只是从表层上进行了一个介绍，由于作者也是近期刚刚接触，也有很多不明白的地方，如有问题，请随时联系作者，共同学习和进步。</p><h3 id="一、线性误差"><a href="#一、线性误差" class="headerlink" title="一、线性误差"></a>一、线性误差</h3><p><strong>1、Packet detection delay/packet boundary delay</strong></p><p>由于OFDM系统接受端在接受packet时，分组到达接受端后并不会立即被接受端接受，接受端会进行能量检测，当能量到达一定阈值，才会开始接受接下来的分组。同一信道下，多组CSI数据包对应的PDD，符合高斯分布。也就是说，在特定信道中收集多个CSI数据包，然后对这些CSI数据包求平均，所得到的平均CSI就可以消除PDD。注意，这里对于每次测量所得到的CSI包的PDD都不一样，也就是说多组测量中的CSI包的PDD虽然不一样，但是符合高斯分布。 </p><p><strong>2、Sampling frequency offset</strong></p><p>接受端和发送端之间由于时钟不同步而导致采样频率不同，所以会导致SFO，SFO和PDD不同，消除起来比较麻烦。对于不同信道中的CSI包，他们所对应的SFO都是相同的，只要发送端和接收端的采样频率不变，那么SFO就不会改变。 </p><p><strong>3、Carrier frequency offset</strong></p><p>这部分误差和硬件相关，但是只会影响CSI的幅值，并不会影响相位。 </p><p><strong>4、其他</strong></p><p>PA、PLL、PAU等等，不作为主要影响因素，不再一一介绍</p><h3 id="二、非线性误差"><a href="#二、非线性误差" class="headerlink" title="二、非线性误差"></a><strong>二、非线性误差</strong></h3><p>非线性误差主要是由于I/Q imbalance而引起。非线性误差对于不同的频带、不同的子载波都是不同的。 </p><hr><p>文献参考： </p><p>[1] Precise Power Delay Profiling with Commodity WiFi Yaxiong Xie, Zhenjiang Li, Mo Li(主要介绍了如何消除线性误差) </p><p>[2] Identifying Non-linear CSI Phase Measurement Errors with Commodity WiFi Devices  Yiwei Zhuo, Hongzi Zhu, Hua Xue (主要介绍了什么是非线性误差)</p><p>[3]  Perceiving Accurate CSI Phases with Commodity WiFi Devices Yiwei Zhuo, Hongzi Zhu, Hua Xue1, Shan Chang  (主要介绍了如何消除线性误差和非线性误差) </p>]]></content>
      
      
      <categories>
          
          <category> 无线信号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WiFi </tag>
            
            <tag> CSI误差分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac和Windows系统中ssh密钥的生成和共享</title>
      <link href="/2019/11/02/sshkey-mac-windows/"/>
      <url>/2019/11/02/sshkey-mac-windows/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Windows环境下获得公钥和私钥"><a href="#1、Windows环境下获得公钥和私钥" class="headerlink" title="1、Windows环境下获得公钥和私钥"></a><strong>1、Windows环境下获得公钥和私钥</strong></h2><p>（1）安装git，从程序目录打开 “Git Bash” </p><p>（2）在Git Bash控制台上输入：<code>ssh-keygen -t rsa</code> ，这时候会让你输入passphrase，直接点击enter键即可。</p><p>（3）在控制台上会显示私玥和公钥的保存位置 (id_rsa,就是私钥文件，id_rsa.pub就是公钥文件）。</p><h2 id="2、Mac环境下获得公钥和私钥"><a href="#2、Mac环境下获得公钥和私钥" class="headerlink" title="2、Mac环境下获得公钥和私钥"></a><strong>2、Mac环境下获得公钥和私钥</strong></h2><p>由于Mac OS一般都自带了git环境，所以直接打开控制台，输入<code>ssh-keygen -t rsa</code>，一路回车到底即可。然后文件会存储到</p><p>～／.ssh文件夹中，打开Finder，快捷键command+G+↑，输入～／.ssh即可前往。</p><h2 id="3、Windows端和Mac端共享私玥"><a href="#3、Windows端和Mac端共享私玥" class="headerlink" title="3、Windows端和Mac端共享私玥"></a><strong>3、Windows端和Mac端共享私玥</strong></h2><p>当我们即想用Windows也想用Mac端来访问服务器，但是因为某些方面原因，每个人只能提交一个设备的私玥信息，那么应该如何将Windows和Mac进行私玥共享呢？</p><p>（1）首先将windows环境下的私钥文件拷贝到Mac上，保存到桌面上即可，文件名为id_rsa</p><p>（2）在Mac端打开控制台，输入<code>cd ~/.ssh</code></p><p>（3）<code>cp ~/Desktop/id_rsa id_rsa //将私玥文件拷贝到指定目录的文件下</code></p><p>（4）<code>ssh-add -K ~/.ssh/id_rsa     //导入私钥</code></p><p>（5）一路enter到底即可</p><p>到此，就可以完成了共享私钥操作，在mac端打开XQuarts，然后在终端输入 ssh -X {username}@{IP地址},即可访问远程服务器。在Windows端可以使用MobaXterm等工具进行连接。😎</p>]]></content>
      
      
      <categories>
          
          <category> ssh连接 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh密钥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog搭建过程中的问题解决</title>
      <link href="/2019/08/31/some-problems-in-blog-solved/"/>
      <url>/2019/08/31/some-problems-in-blog-solved/</url>
      
        <content type="html"><![CDATA[<p>之前基于Hexo的matery模板搭建了一个个人博客(搭建教程详见另一篇博客：(<a href="https://hanfeiyu.com/2019/08/27/start-my-blog/" target="_blank" rel="noopener">https://hanfeiyu.com/2019/08/27/start-my-blog/</a>)，在后期完善过程中，遇到了许多这样那样的问题，所以专门写了一篇博客记录下来，此篇博客将在后期不定时更新（每遇到问题时😀）。</p><hr><h2 id="一、个性化定制"><a href="#一、个性化定制" class="headerlink" title="一、个性化定制"></a>一、个性化定制</h2><h3 id="1、使用Gittalk插件时，点击GitHub登录，网站跳转失败问题"><a href="#1、使用Gittalk插件时，点击GitHub登录，网站跳转失败问题" class="headerlink" title="1、使用Gittalk插件时，点击GitHub登录，网站跳转失败问题"></a>1、使用Gittalk插件时，点击GitHub登录，网站跳转失败问题</h3><p>在博客文章下面添加评论模块，hexo-theme-matery模板中已经提供了gitalk接口，很方便我们直接调用。我们要在GitHub中创建一个应用：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a> </p><p><img src="1.png" alt></p><p>创建之后，会出现clienIdhe clientSecret信息：</p><p><img src="2.jpg" alt></p><p>打开<code>D:\MyBlog\themes\hexo-theme-matery\ _config.yml</code>，</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">owner</span><span class="token punctuation">:</span>  FyHaHa <span class="token comment" spellcheck="true">##GitHub 的用户名</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> fyhaha.github.io <span class="token comment" spellcheck="true"># 前文建立的repository名称</span>  <span class="token key atrule">oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">clientId</span><span class="token punctuation">:</span>     <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span>   <span class="token key atrule">admin</span><span class="token punctuation">:</span> FyHaHa  <span class="token comment" spellcheck="true">##GitHub 的用户名</span></code></pre><p>然后 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><p>但是，你会发现当你点击GitHub登陆时，总会跳转到博客主页，这是为什么呢？韩先森一开始也百思不得其解，最后查阅资料知道，我们在创建repository 时，勾选了Enforce HTTPS（下图）选项，所以导致每当我们点击GitHub登陆时，总是寻址都寻不到正确的网址，不得已才会回调到我们博客。</p><p><img src="3.png" alt></p><p>所以我们应该在GitHub创建应用时，应该将网址前缀修改为https，</p><p><img src="4.png" alt></p><p>这样，就可以正常登录GitHub进行评论了。</p><h3 id="2、修改主题配色"><a href="#2、修改主题配色" class="headerlink" title="2、修改主题配色"></a>2、修改主题配色</h3><p>如果你想要修改主题配色，需要对源代码进行修改，打开主题文件夹目录下的source\css\matery.css，找到</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span> <span class="token selector">0%,    100% </span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token selector">16% </span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token number">......</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>对CSS语言不熟悉的同学看到这里可能就有一丝丝蒙蔽了，没关系，不熟也没关系。为什么rainbow前缀为何要加上<code>@-webkit-keyframes</code> , <code>@keyframes</code> ,因为不同浏览器的内核不同，这样做的目的就是要支持不同内核的浏览器，所以<code>@-webkit-keyframes rainbow</code> 和 <code>@keyframes rainbow</code> 两个代码段的代码相同。linear-gradient()函数是实现渐变色的效果，</p><pre class=" language-css"><code class="language-css"><span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token number">45</span>deg, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">160</span>, <span class="token number">0</span>, <span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token number">0%</span>, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">160</span>, <span class="token number">0</span>, <span class="token number">0.65</span><span class="token punctuation">)</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>上条指令的效果，便是从45度角的为止，开始渐变颜色，从rgb为(255,260,0)，透明度为0.75的颜色，渐变为rgb为(255,260,0)，透明度为0.65的颜色。</p><pre class=" language-CSS"><code class="language-CSS"> background: -moz-linear-gradient();  /*for FireFox*/ background: -webkit-linear-gradient(); /*for Safari and Chrome*/</code></pre><p>表示支持不同内核的浏览器的渐变函数。</p><p><img src="5.png" alt></p><p>然后根据你的个人喜好，合理的搭配颜色即可。</p><p>主题颜色配好之后，如果还想配置其他控件的颜色或者其他属性，可以在</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*修改导航栏颜色*/</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.progress-bar</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*修改页面底部进度条的属性：大小、颜色等*/</span><span class="token punctuation">}</span><span class="token selector">header <span class="token class">.brand-logo</span> <span class="token class">.logo-img</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*修改Logo大小、位置*/</span><span class="token punctuation">}</span></code></pre><p>更多控件属性均可以在matery.css中进行修改，等待着你的发现！</p><hr><h2 id="二、博客发布"><a href="#二、博客发布" class="headerlink" title="二、博客发布"></a>二、博客发布</h2><h3 id="1、图片上传失败"><a href="#1、图片上传失败" class="headerlink" title="1、图片上传失败"></a>1、图片上传失败</h3><p>这点是自己在做测试时发现的，在写博客的时候，有时候如果图片尺寸过大，容易造成上传不成功，这时候就需要对图像进行压缩后上传。</p><h3 id="2、不支持某些特定字符"><a href="#2、不支持某些特定字符" class="headerlink" title="2、不支持某些特定字符"></a>2、不支持某些特定字符</h3><p>在写博文时，不知道你有木有遇到以下问题：</p><p><img src="6.png" alt></p><p>错误提示是在_post\some-problems-in-blog-solved.md中，出现错误，定位在line 2 colume 4，</p><pre class=" language-bash"><code class="language-bash">ERROR Process failed: _posts/some-problems-in-blog-solved.mdYAMLException: can not <span class="token function">read</span> a block mapping entry<span class="token punctuation">;</span> a multiline key may not be an implicit key at line 2, column 4:    top: <span class="token boolean">false</span></code></pre><p>但是，我回到.md文件中查看，发现并没有什么语法错误。</p><p><img src="7.png" alt></p><p>百思不得其解，结果后来发现，是因为我在标题使用了<code>[ ]</code> 字符，将[ ]删除后，即可正常运行。</p><h3 id="3、变量定义冲突"><a href="#3、变量定义冲突" class="headerlink" title="3、变量定义冲突"></a>3、变量定义冲突</h3><p>错误信息：</p><pre class=" language-bash"><code class="language-bash">ERROR Process failed: _posts/some-problems-in-blog-solved.mdYAMLException: duplicated mapping key at line 8, column 1:    cover: <span class="token boolean">false</span>    ^</code></pre><p>表示有变量定义冲突，查看_posts\some-problems-in-blog-solved.md文件，发现cover变量重复定义。</p><p><img src="8.png" alt></p><h3 id="4、文章加密"><a href="#4、文章加密" class="headerlink" title="4、文章加密"></a>4、文章加密</h3><p>通过安装hexo-blog-encrypt插件来实现文章的加密，需要注意以下问题：</p><p><img src="9.png" alt></p><hr>]]></content>
      
      
      <categories>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完整教程:(低成本快速)手把手教你搭建基于hexo+GitHub的个人博客</title>
      <link href="/2019/08/27/start-my-blog/"/>
      <url>/2019/08/27/start-my-blog/</url>
      
        <content type="html"><![CDATA[<p>最近，韩先森即将迎来开学，于是就想利用开学之前的这段日子做些小玩意，比如搭建一个个人博客出来，心动不如行动，那就开始做吧。我之前对网站搭建也有一定的了解，但是仅限于了解，基本上和小白差不多。这不，前前后后折腾了3天的时间才将网站搭了出来，搭建过程中，也就是购买域名的时候花了点RMB，总体成本是55元（当然除去人力成本和时间成本这些哈&lt;–&gt;）。网站能够搭建出来也要感谢godweiyang的支持（ <a href="https://godweiyang.com" target="_blank" rel="noopener">https://godweiyang.com</a> ），godweiyang这篇博客已经写的很详细了，但自己在搭建过程中依然遇到这样那样的问题，所以结合自身的实际情况，来写这篇博客。所以想要拥有个人博客，并且<strong>没有任何网站搭建经验并且还想省钱</strong>的同学，那么这篇博客绝对不辜负你的期望，话不多说，我们开始挽起袖子，加油干！</p><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>首先，你需要在拥有一台电脑(废话)，然后在电脑上安装:</p><ul><li><code>Node.js</code></li><li><code>Git</code></li><li><code>hexo</code></li></ul><p>除此之外，你应该还需要在GitHub上注册一个账号，如果你没有的话。</p><p>这里我就直接使用实验室配的电脑来进行搭建，操作系统是Windows 10.</p><h3 id="1、Node-js安装"><a href="#1、Node-js安装" class="headerlink" title="1、Node.js安装"></a>1、Node.js安装</h3><p>下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>下载成功后，直接一路傻瓜式安装即可。安装完成后，打开终端（ <code>Win+R</code>，然后输入<code>cmd</code> ），输入指令:</p><pre><code>node -vnpm -v</code></pre><p>如果出现关于node.js的版本号之后(下图)，就证明这一步已经成功了，开始下一步。</p><p><img src="1.png" alt></p><h3 id="2、Git安装"><a href="#2、Git安装" class="headerlink" title="2、Git安装"></a>2、Git安装</h3><p>下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>下载成功后，安装时基本上都选择默认选项即可，有人可能问，Git这种命令行工具是不是必须安装到C盘才可以，其实是不需要的，包括上面的Node.js安装位置，这里韩先森将他们都统一安装到了我的软件盘:D盘（个人习惯）。然后你在桌面左下角搜索栏中输入Git，如果出现Git bash图标，那么恭喜你，这一步也完成了。</p><p><img src="2.png" alt></p><h3 id="3、GitHub准备工作"><a href="#3、GitHub准备工作" class="headerlink" title="3、GitHub准备工作"></a>3、GitHub准备工作</h3><p>首先需要在GitHub上申请一个账号（这一步可以直接参照官网指导），然后新建一个repository ：</p><p>（ <em>将 <code>Initialize this repository with a README</code> 这项也打上勾</em> ）</p><p><img src="4.png" alt></p><p><strong>注意这里repository name格式一定是 <code>username.github.io</code> ，（username就是你github的用户名，比如韩先森的用户名是fyhaha，所以repository name就是fyhaha.github.io ）否则网站会出现404或者导致网页显示不正常。</strong></p><p>创建完成后，打开你所创建的项目，点击<code>setting-&gt;GitHub Pages -&gt; change theme--&gt;select theme</code>,具体流程可以参照下图：</p><p><img src="5.png" alt></p><p>（<em>这个模块要在settings的最下面，不是很容易找到</em>  ）</p><p><img src="6.png" alt></p><p><img src="7.png" alt></p><p>操作完之后，我们返回GitHub Pages 发现变成了这个样子：（由于<code>hanfeiyu.com</code>是我已经注册的域名，所以显示这个，按照流程正常操作之后，应该是 <a href="http://github.com/username/username.github.io" target="_blank" rel="noopener">http://github.com/username/username.github.io</a> ）</p><p><img src="8.png" alt></p><h3 id="4、hexo"><a href="#4、hexo" class="headerlink" title="4、hexo"></a>4、hexo</h3><p>从这里开始，我们就需要将Git Bash工具引上舞台了，我在D盘（是我的存储盘，因人而异哟，在其他盘建立也无碍）目录下新建了一个文件夹MyBlog，然后再MyBlog文件夹中，右击鼠标，打开git Bash，然后输入指令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>这一步下载的时候可能会很慢，耐心等待一会或者使用国内镜像源来下载：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.orgcnpm <span class="token function">install</span> -g hexo-cli </code></pre><p>使用 指令</p><pre class=" language-bash"><code class="language-bash">hexo -v</code></pre><p>来检查hexo是否安装成功，出现下图则说明安装成功。</p><p><img src="3.png" alt></p><p>然后输入以下命令:</p><pre class=" language-bash"><code class="language-bash">hexo init //初始化文件夹，这一步操作主要是从Github上下载hexo相关文件<span class="token function">npm</span> <span class="token function">install</span> //下载相关组件，指令执行后，会发现所在的文件目录下多了一个node_modules的文件夹//至此，网站在本地的配置工作也完成了，那么接下来就可以先将网页部署在本地上了hexo g //生成静态网页文件，操作完成后，目录下又会多出一个public文件夹。这里面就是存储生成的所有静态网页文件。hexo s //将网页文件部署到本地</code></pre><p>然后打开浏览器，输入<a href="https://localhost:4000" target="_blank" rel="noopener">https://localhost:4000</a> ，就可以看到以下激动的画面:</p><p><img src="9.png" alt></p><p>这就说明，你已经成功的在本地搭建了一个基于hexo的网站，但是先着急，还有更激动的事情呢……</p><p>网站光部署在本地是不够的，因为你部署在本地就能只供自己在自己的电脑上访问，那就不算做是网站。接下来我们就要将它部署到GitHub上，可以使得全球的互联网用户来访问。</p><p>到此为止，我们前期的所有工作均已准备就绪。那么接下来我们就开始正式进入搭建过程！</p><h2 id="二、网站的搭建"><a href="#二、网站的搭建" class="headerlink" title="二、网站的搭建"></a>二、网站的搭建</h2><h3 id="1-、本地与GitHub连接"><a href="#1-、本地与GitHub连接" class="headerlink" title="1 、本地与GitHub连接"></a>1 、本地与GitHub连接</h3><p>结束上文的操作后，我们需要将本地（你的电脑）与GitHub通过ssh连接起来，因为这样，你才能将本地的生成的网页静态文件，部署到GitHub服务器上。</p><p>依然在我们1.4节中所建立的<code>D:\MyBlog</code>文件夹中，打开Git Bash，然后输入以下指令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"FyHaHa"</span> //<span class="token string">"FyHaHa"</span> 替换成你自己的GitHub用户名，不区分大小写<span class="token function">git</span> config --global user.email <span class="token string">"fyhancs@gmail.com"</span> //<span class="token string">"fyhancs@gmail.com"</span> 替换成你在GitHub注册的邮箱</code></pre><p>利用Git来生成本地的ssh key</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"fyhancs@gmail.com"</span></code></pre><p><img src="10.png" alt></p><p>如果本地上已经存在了id_rsa文件，输入y，直接替换。然后连续两个回车，便可以生成密钥文件。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub</code></pre><p>查看密钥信息：</p><p><img src="11.png" alt></p><p>然后在Github中，点击头像下面的settings–&gt;SSH and GPG keys，新建一个ssh，将密钥信息复制到框中，然后保存。</p><p><img src="12.jpg" alt></p><p><img src="13.png" alt></p><p>输入以下指令，如果出现你的GitHub用户名，那就证明连接成功！</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com </code></pre><p><img src="14.png" alt></p><h3 id="2、网站配置"><a href="#2、网站配置" class="headerlink" title="2、网站配置"></a>2、网站配置</h3><p>OK ，然后我们对hexo进行环境配置。在进行环境配置之前，先让大家了解一下hexo的结构。经过以上步骤后，在<code>D:\MyBlog\</code>的目录中会存在以下文件夹以及文件：</p><p><img src="15.png" alt></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">node_modules</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#存储的是hexo的各种组件或者第三方插件，这个文件夹中的文件一般不需要我们去修改。</span><span class="token key atrule">public</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#当在本地进行调试时，所生成的网页静态文件存储于此，这个文件夹中的文件也不需要我们去修改。</span><span class="token key atrule">scaffolds</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#这里面有post.md,draft.md,page.md这三个文件，可以将他们看成模板文件，比如post.md就是文章的模板，里面定义了文章日期、是否置顶等属性。</span><span class="token key atrule">source</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#存储文章等资源文件。 </span><span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#存储网站的主题模板。</span>_config：<span class="token comment" spellcheck="true">#网站的配置文件。</span></code></pre><p>我们要做的是打开<code>_config.yml</code>文件，对网站的属性进行配置，比如：网站名称、logo等等（可以根据个人需要来进行修改)。这里我们只针对网站部署模块进行修改：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Deployment</span><span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/username/username.github.io.git  //网站的静态文件将会部署在这里，username是GitHub的用户名，记得替换  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre><p>这样，就完成了网站在GitHub上的部署。</p><p>还是在Git Bash中输入</p><pre class=" language-bash"><code class="language-bash">hexo cleanhexo g hexo d //完成部署操作</code></pre><p>然后在打开浏览器，输入<a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a> ，你就可以看到：</p><p><img src="9.png" alt></p><h3 id="3、创建第一篇博客"><a href="#3、创建第一篇博客" class="headerlink" title="3、创建第一篇博客"></a>3、创建第一篇博客</h3><p>还是在上文一直使用的Git bash中，输入</p><pre class=" language-bash"><code class="language-bash">hexo new post <span class="token string">"my_artical"</span></code></pre><p>这样就在<code>D:\MyBlog\source\_posts</code>中创建了一个<code>my_artical.md</code>文件，然后用编辑器打开，你就可以随心所欲的在里面发挥你的创作才能了。创作完毕后，在打开的Git Bash中输入：</p><pre class=" language-bash"><code class="language-bash">hexo cleanhexo g hexo d //完成部署操作</code></pre><p>这样你就可以在<a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a> 中看到你的文章了，开心不开心，激动不激动。</p><p>到这里，个人博客基本上就搭建完毕，以后你就可以在<a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a> 随心所欲的发表你的文章了。</p><hr><p>But！但是你如果想让博客用自己的个性化域名而不是用Github提供的默认域名，比如廖雪峰老师的liaoxuefeng.com这种看起来很有牌面的域名，应该怎么办呢，请接着看。</p><h3 id="4、绑定个人域名"><a href="#4、绑定个人域名" class="headerlink" title="4、绑定个人域名"></a>4、绑定个人域名</h3><p>首先要在域名代理商那里购买域名，网上很多人说域名最好买国外的，有很多好处，不如不需要备案，便宜等等。但是我们的域名仅是用于个人博客用，再加上我们使用了GitHub的服务器，所以我个人建议，就直接在阿里云上购买即可。主要有以下几点优点：</p><ul><li>因为我们只是购买了域名，而没有使用阿里云的服务器，所以不需要进行繁琐的备案。但是域名购买需要实名认证，认证之后，很快就可以直接解析使用，我从认证到购买成功再到解析成功的过程，不到一小时就完成了。当然，我也不排除我是因为巧合，因为网上依然是有人在吐槽阿里云的认证速度。</li><li>我对比了国内的阿里云、腾讯云、百度云，以及国外的namecheap、GoDaddy这些域名代理商，发现国内平台的域名更加便宜一些，并且付款手续简单，直接支付宝或者微信即可，国外的域名注册平台支持银联卡操作，大多不支持支付宝微信付款方式。</li></ul><p>在阿里云购买之后，等到域名状态从serverhold变为正常后，就可以进行解析了：</p><p><img src="16.png" alt></p><p>解析成功后，在你的GitHub上项目中，进入settings-&gt;Github Pages，在<code>Custom domain</code>中填写你的专属域名，注意，我这里没有带www，这样别人就可以直接在浏览器中输入hanfeiyu.com就可以访问我的博客了，要不然，别人在访问你的时候，必须要输入&lt;<a href="http://www.hanfeiyu.com&gt;" target="_blank" rel="noopener">www.hanfeiyu.com&gt;</a> 才可以访问。然后save之后，你会在你的repository中发现多了一个CNAME的文件，然后再在<code>D:\MyBlog\source\</code>目录下新建一个CNAME文件（没有后缀）,在里面填写上你的专属域名<code>hanfeiyu.com</code>，保存。</p><p><img src="17.png" alt></p><p>这样，别人就可以使用你的专属域名来访问你的个人博客了。</p><h3 id="5、添加主题"><a href="#5、添加主题" class="headerlink" title="5、添加主题"></a>5、添加主题</h3><p>如果你认为hexo默认的主题不符合你的气质,你可以自己到hexo官网上寻找一个适合你的主题风格。这里韩先森使用的是  hexo-theme-matery主题 (<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a> )。将主题问价下载解压之后，放在<code>D:\MyBlog\theme</code>目录下，然后打开<code>D:\MyBlog\_config.yml</code>，修改theme属性：</p><p><img src="18.png" alt></p><p>hero-theme-matery提供了很多个性化功能的接口，比如：响应式设计、自定义界面、文章置顶、评论等，用户如果想使用某个功能，只需要在配置文件中进行配置即可。更多的精彩功能详见：</p><ul><li><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a></li></ul><p>这是我基于hero-theme-matery主题搭建的博客网站 ( <a href="https://hanfeiyu.com" target="_blank" rel="noopener">https://hanfeiyu.com</a>  ) 效果展示图：</p><p><img src="19.png" alt></p><h3 id="6、实现下载功能"><a href="#6、实现下载功能" class="headerlink" title="6、实现下载功能"></a>6、实现下载功能</h3><p>如果我们有一份源代码，想在网站上提供下载链接，只需要以下几步即可。</p><p>这里我新建一份新的博客，命令test，使用hexo new post “test”指令后会得到一个test文件夹河test.md文件：</p><p><img src="26.png" alt></p><p>然后将希望下载的文件，比如说21.pdf文件，放入test文件夹下。</p><p>在test.md中，编写：</p><p><img src="27.png" alt></p><p>然后，编译运行之后，便可以成功！</p><p><img src="28.png" alt></p><h2 id="三、多台设备同步更新网站"><a href="#三、多台设备同步更新网站" class="headerlink" title="三、多台设备同步更新网站"></a>三、多台设备同步更新网站</h2><p>但是，如果我想要发布博客，或者对网站功能进行优化升级，就只能通过实验室的电脑进行操作，因为网站的环境配置文件和代码都保存在电脑本地端。如果我有事情要外出出差个两周，在出差这段时间我有好的idea想要发布在博客上，应该怎么办呢？那么接下来我就教大家如何在多台电脑上发布和维护博客。</p><h3 id="1、代码备份到GitHub上"><a href="#1、代码备份到GitHub上" class="headerlink" title="1、代码备份到GitHub上"></a>1、代码备份到GitHub上</h3><p>首先，需要在GitHub上新建一个repository ,名，命名为myblog_hexo，如果你不想让别人访问你的项目，可以设置为private：</p><p><img src="20.png" alt></p><p>我们接下来就将我们在本地的网站源码上传到myblog_hexo中，打开<code>D:\MyBlog</code>，在MyBlog目录下打开Git Bash工具，输入：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/fyhaha/myblog_hexo  //将GitHub中新建的myblog_hexo下载到本地中</code></pre><p>然后你会发现在你的MyBlog文件夹中多了一个myblog_hexo的文件夹，进入myblog_hexo目录下，找到.git文件夹。有的同学可能进入myblog_hexo目录后 ，没有发现这个.git文件夹，这是因为.git文件默认是隐藏的，所以我们需要将隐藏的文件显示出来：</p><p><img src="21.png" alt></p><p>然后，将.git移到MyBlog文件夹目录下，在Git Bash工具中输入：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add -A<span class="token function">git</span> commit -m <span class="token string">"xxxxx"</span>  // 引号内的xxxx可以随便写<span class="token function">git</span> push</code></pre><p>执行完之后，本地的代码就会上传到GitHub新建的myblog_hexo中。接下来你就可以在另一台电脑上进行网站的运营和维护了。</p><h3 id="2、在另一台设备上创建发布博客"><a href="#2、在另一台设备上创建发布博客" class="headerlink" title="2、在另一台设备上创建发布博客"></a>2、在另一台设备上创建发布博客</h3><p>这里我要在一台从来没有配置过博客环境的MacBook上进行操作示范，首先，要确保Mac上安装了Node.js hexo Git(一般Mac上都会自带Git环境)，如果没有的话，自行参照上文第一章进行安装。然后还要将Mac和GitHub连接，如同我们2.1中所介绍，将Mac的ssh key保存到GitHub中即可。</p><p>Mac生成ssh密钥方式和windows相似，打开终端，输入<code>ssh-keygen -t rsa</code>，一路回车到底即可。然后使用 </p><p><code>cat ~/.ssh/id_rsa.pub</code> 来查看密钥。将密钥信息拷贝到GitHub中保存即可（操作同2.1节）。</p><p>连接成功后，新建MyBlog文件夹，打开终端，进入你所新建的文件夹中，然后使用Git指令将你在GitHub上的myblog_hexo项目下载到本地：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /Users/freddy/Documents/MyBlog  <span class="token function">git</span> clone https://github.com/fyhaha/myblog_hexo</code></pre><p>然后进入myblog_hexo目录下，进行安装hexo必要组件，</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> myblog_hexo<span class="token function">npm</span> <span class="token function">install</span></code></pre><p>OK,到这里，你就可以在Mac上创建你的博客，</p><pre class=" language-bash"><code class="language-bash">hexo new post <span class="token string">"lalala"</span></code></pre><p>然后对它进行编辑，编辑完成后，通过hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 将博客部署到GitHub服务器上，然后在浏览器中就可以看到你新发布的博客了。注意，当你完成之后发布之后，别忘了将你修改后的文件上传到GitHub上，</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add -A<span class="token function">git</span> commit -m <span class="token string">"xxxx"</span><span class="token function">git</span> push </code></pre><p><strong><em>注意</em></strong></p><p>如果你之前已经在某台电脑上创建发布过博客，那么再使用这台电脑进行发布博客时，就不需要再进行上述那么麻烦的同步工作了，这就得益于GitHub的强大功能了。以我实验室的电脑为例，倘若我经过上述步骤后，在Mac上成功发布了一篇博客，现在我又要用我实验室的电脑（也就是最初我用来搭建网站的电脑）来再次发布一篇博客，那么我需要在D:/MyBlog目录下使用Git Bash工具执行：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull  //将GitHub上的代码更新到本地</code></pre><p>这样可以保证我在Mac上对网站内容所作的修改，同步更新到我本地。然后就可以按照上文所讲的步骤进行疯狂的各种操作，但别忘记了操作完之后，需要将本地修改后的网站内容上传至GitHub，确保网站的实时同步更新。</p><h2 id="四、问题以及解决"><a href="#四、问题以及解决" class="headerlink" title="四、问题以及解决"></a>四、问题以及解决</h2><h3 id="1、使用gitalk插件实现评论"><a href="#1、使用gitalk插件实现评论" class="headerlink" title="1、使用gitalk插件实现评论"></a>1、使用gitalk插件实现评论</h3><p>在博客文章下面添加评论模块，hexo-theme-matery模板中已经提供了gitalk接口，很方便我们直接调用。我们要在GitHub中创建一个应用：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a> </p><p><img src="22.png" alt></p><p>创建之后，会出现clienIdhe clientSecret信息：</p><p><img src="23.jpg" alt></p><p>打开<code>D:\MyBlog\themes\hexo-theme-matery\ _config.yml</code>，</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">owner</span><span class="token punctuation">:</span>  FyHaHa <span class="token comment" spellcheck="true">##GitHub 的用户名</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> fyhaha.github.io <span class="token comment" spellcheck="true"># 前文建立的repository名称</span>  <span class="token key atrule">oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">clientId</span><span class="token punctuation">:</span>     <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span>   <span class="token key atrule">admin</span><span class="token punctuation">:</span> FyHaHa  <span class="token comment" spellcheck="true">##GitHub 的用户名</span></code></pre><p>然后 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><p>但是，你会发现当你点击GitHub登陆时，总会跳转到博客主页，这是为什么呢？韩先森一开始也百思不得其解，最后查阅资料知道，我们在创建repository 时，勾选了Enforce HTTPS（下图）选项，所以导致每当我们点击GitHub登陆时，总是寻址都寻不到正确的网址，不得已才会回调到我们博客。</p><p><img src="25.png" alt></p><p>所以我们应该在GitHub创建应用时，应该将网址前缀修改为https，</p><p><img src="24.png" alt></p><p>这样，就可以正常登录GitHub进行评论了。</p><h3 id="2、图片上传失败"><a href="#2、图片上传失败" class="headerlink" title="2、图片上传失败"></a>2、图片上传失败</h3><p>这点是自己在做测试时发现的，在写博客的时候，有时候如果图片尺寸过大，容易造成上传不成功，这时候就需要对图像进行压缩后上传。</p><p>……</p><p>( <strong>此部分将在另外一篇文章中持续更新！</strong>)</p><hr><p>以上就是我搭建的全部过程，如果同学你在过程中依然存在某些问题，可以在底下评论，或者E-mail我都可以，联系方式，可以见博客的“关于”。</p>]]></content>
      
      
      <categories>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
