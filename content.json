{"meta":{"title":"FyHaHa","subtitle":"我的主页","description":"精神的浩瀚，想象的活跃，心灵的勤奋","author":"XXXXL超大码","url":"https://fyhaha.github.io","root":"/"},"pages":[{"title":"data1","date":"2019-08-24T04:13:50.000Z","updated":"2020-08-24T13:55:50.726Z","comments":true,"path":"404.html","permalink":"https://fyhaha.github.io/404.html","excerpt":"","text":""},{"title":"about","date":"2019-08-23T13:26:56.000Z","updated":"2020-08-24T13:55:50.846Z","comments":true,"path":"about/index.html","permalink":"https://fyhaha.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-08-23T13:25:17.000Z","updated":"2020-08-24T13:55:50.846Z","comments":true,"path":"categories/index.html","permalink":"https://fyhaha.github.io/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2019-08-23T13:27:32.000Z","updated":"2020-08-24T13:55:50.847Z","comments":true,"path":"friends/index.html","permalink":"https://fyhaha.github.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-08-23T13:26:25.000Z","updated":"2020-08-24T13:55:50.847Z","comments":true,"path":"tags/index.html","permalink":"https://fyhaha.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"基于BLE的多节点AoA室内定位","slug":"BLE-Localization","date":"2020-04-22T09:00:29.000Z","updated":"2020-08-24T13:55:50.726Z","comments":true,"path":"2020/04/22/BLE-Localization/","link":"","permalink":"https://fyhaha.github.io/2020/04/22/BLE-Localization/","excerpt":"","text":"AOA定位原理AOA（Arrival of Angle）定位方法是通过计算目标发射的信号到达AP(Access Point)的角度，根据到达的角度可以推测出以基站为起点的射线的斜率，射线必定经过目标点，由两个或者两个以上的基站便可以得到目标的位置。 在二维平面上，如图1-4所示，AP装有天线阵列，天线阵列可以通过算法计算出发送信号到达接收天线的角度，信号到达两个AP的角度分别为$\\alpha 1$和$\\alpha 2$，AP的坐标位置已知，（x1，y1），（x2，y2），目标的坐标位置未知（x，y），则根据三角函数可知： 节点空间部署使用一个Master(CC26x2R LaunchPad),以及一个Slave(CC26x2R LaunchPad)，三个Passive(CC26x2R LaunchPad+BOOSTXL-AOA)，其中Passive端和Master端作为接受端，由于只有Passive端安装了外置天线，所以只有Passive端才会计算AoA，Slave充当发送端。由于CC26x2R开发版的内置天线是线极化的，所以在节点空间部署上要注意接受端的摆放位置，推荐摆放位置： 实验关键参数设置在SDK中可以通过 /tools/ble5stack/rtls_agent/example/rtls_example_with_rtls_util.py来设置实验的一些关键参数，比如天线阵列的选择以及天线的根数。然后通过可视化前端就可以看到数据的变化。 IQ数据如果想使用开发板拿到无线信号的IQ数据来进行信号分析，可以使用/tools/ble5stack/rtls_agent/example/rtls_aoa_iq_with_rtls_util_export_into_csv.py","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://fyhaha.github.io/categories/学习笔记/"}],"tags":[{"name":"CC26x2R","slug":"CC26x2R","permalink":"https://fyhaha.github.io/tags/CC26x2R/"},{"name":"RTLS","slug":"RTLS","permalink":"https://fyhaha.github.io/tags/RTLS/"}]},{"title":"基于SimpleLink CC26x2R LaunchPad的AoA角度误差测量","slug":"cc26x2r-aoa","date":"2020-04-14T01:18:25.000Z","updated":"2020-08-24T13:55:50.795Z","comments":true,"path":"2020/04/14/cc26x2r-aoa/","link":"","permalink":"https://fyhaha.github.io/2020/04/14/cc26x2r-aoa/","excerpt":"","text":"在上一篇博客中(https://blog.csdn.net/dreamerhan/article/details/105248944)，我介绍了如何基于SimpleLink CC26x2R LaunchPad来进行定位系统的搭建，并如何运行可视化demo。但在Demo运行后，AoA是固定的值，如下图所示： 这是因为我们使用的Passive使用的是内置单天线，所以计算得到的角度只是一个固定值。本章节，我将介绍如何利用CC26XR开发板来进行AoA测量。 按照https://blog.csdn.net/dreamerhan/article/details/105248944配置好Master, Slave, Passive节点。CC26xR开发版烧录对应的程序就可以充当Master，Slave端，Passive端除了烧录对应的程序之外，还需要将开发板上的C51电容切换至外置天线连接点，如下图。然后将BOOSTXL-AoA上的JSC连接口连接到已配置好外置天线开关的开发版上，然后将BOOSTXL-AoA上的引脚与CC26x2R开发版上的引脚连接。以上就是我们的准备工作，接下来开始进入有趣的步骤。 AoA测量TI官网上下载的SDK中，有三种计算AoA的模式：仅Passive端提供AoA测量，仅Master端提供AoA测量，Passive和Master端都提供AoA测量。这里我们选择仅Passive端提供AoA测量。（因为小编手里目前只有一个BOOSTXL-AOA）。需要对代码进行修改，具体修改方式，见官网说明http://dev.ti.com/tirex/explore/node?node=AHYhhuDNTaRXzkOlahOlvA__pTTHBmu__LATEST。 需要注意的是，如果我们想直接利用TI官方SDK提供的Demo，需要也将rtls_master中的main.c的rtlsConfig.rtlsCapab字段也添加RTLS_CAP_AOA_RX. 否则，在运行Demo时，会提示Warring ! One of the device not supporting AOA functionality，最后的结果就是一直收不到AoA packet。 然后将节点放置在离地面高1m的平台上，这样做的目的是减小多径和信号的衰减。为了增加测量结果的准确度，建议节点要放在等高的位置上，否则会在三维上产生误差，也要保证节点之间没有遮挡物和发射物。 之后，在终端运行： cd /Applications/ti/simplelink_cc13x2_26x2_sdk_3_40_00_02/tools/ble5stack/rtls_agent/rtls_ui chmod 777 rtls_ui_macos rtls_ui_macos 便可以观察到在Passive端计算得到的AoA测量值。 如果想让测量精度更高，可以改变接受端(Passive)天线的朝向，当天线阵列垂直发送端和接收端连线的时候，测量精度更高。修改天线朝向时，要注意使用的是天线阵列1还是天线阵列2。 天线的选择BOOSTXL-AOA天线有两个相互正交的天线阵列，但是两个天线阵列不能同时工作，框图如下，由框图可以看出，U1开关在同一时刻，只能选择DIO27-1引脚或者DIO27-0引脚，同时，从框图中，我们还可以得出，在同一个天线阵列的三根天线，也不是同时接收信号，所以会存在一个天线切换，这一点将在下一篇文章中提及。各个引脚控制逻辑如下：用户也可以直接修改/Applications/ti/simplelink_cc13x2_26x2_sdk_3_40_00_02/tools/ble5stack/rtls_agent/examples/rtls_example_with_rtls_util.py中的以下字段： \"aoa_cc26x2\": { \"aoa_slot_durations\": 1, \"aoa_sample_rate\": 1, \"aoa_sample_size\": 1, \"aoa_sampling_control\": int('0x10', 16), ## bit 0 - 0x00 - default filtering, 0x01 - RAW_RF no filtering, ## bit 4,5 - default: 0x10 - ONLY_ANT_1, optional: 0x20 - ONLY_ANT_2 \"aoa_sampling_enable\": 1, \"aoa_pattern_len\": 2, \"aoa_ant_pattern\": [0, 1] } 在SDK3.30版本中，字段有所不同，但是大同小异， \"aoa_cc26x2\": { \"aoa_slot_durations\": 1, \"aoa_sample_rate\": 1, \"aoa_sample_size\": 1, \"aoa_sampling_control\": 1, //1: antenna array 1; 0: antenna array 2; \"aoa_sampling_enable\": 1, \"aoa_num_of_ant\": 3, \"aoa_ant_array_switch\": 27, \"aoa_ant_array\": [28, 29, 30] //三根天线的引脚号 }","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://fyhaha.github.io/categories/学习笔记/"}],"tags":[{"name":"CC26x2R","slug":"CC26x2R","permalink":"https://fyhaha.github.io/tags/CC26x2R/"},{"name":"RTLS","slug":"RTLS","permalink":"https://fyhaha.github.io/tags/RTLS/"}]},{"title":"基于CC26x2R LaunchPad的RTLS系统搭建","slug":"SimpleLink-CC26x2R-Launchpad-RTLS","date":"2020-03-26T11:34:14.000Z","updated":"2020-08-24T13:55:50.726Z","comments":true,"path":"2020/03/26/SimpleLink-CC26x2R-Launchpad-RTLS/","link":"","permalink":"https://fyhaha.github.io/2020/03/26/SimpleLink-CC26x2R-Launchpad-RTLS/","excerpt":"","text":"一、硬件需求 &amp; 软件环境 SimpleLink CC26x2R LaunchPad x 3, BOOSTXL-AoA x 1; SimpleLink CC13x2/26x2 SDK ver.3.40; Python 3.7+; Code Composer Studio （CCS）ver.9.2.0.0; Uniflash ver.5.3.1; TICloudAgent（安装CCS时就会自动安装）; CC26x2R开发版是基于蓝牙低功耗5.1技术进行定位，用户可以从开发板中提取到AoA、ToF信息，AoA和ToF定位原理可以参考官网说明http://dev.ti.com/tirex/explore/node?node=AHYhhuDNTaRXzkOlahOlvA__pTTHBmu__LATEST，或者其他一些无线技术定位文章。本文基于MacOS进行搭建，Windows环境会有一定的差异。另外，不同版本的SDK在使用的过程中，也会有一些差异。 硬件：SimpleLink CC26x2R LaunchPad &amp;&amp; BOOSTXL-AoA CC26x2R开发板在RTLS（Real-time Locating System）系统中充当定位节点，本身就内置单根天线，但是单天线的节点不足以满足RTLS的定位需求，所以需要将开发版外接BOOSTXL-AoA，以达到扩展节点天线数目的目的。 软件安装1、配置Python 3.7环境，教程：https://pythonguidecn.readthedocs.io/zh/latest/starting/install3/osx.html, 如果下载缓慢，可以为homebrew配置国内镜像如：阿里云、中科大等。 2、下载SimpleLink CC13x2/26x2 SDK，需要注册TI账号，注册完成后即可下载，下载之前，TI会询问你SDK的用途，选择民用Civil即可。下载地址：http://www.ti.com/tool/download/SIMPLELINK-CC13X2-26X2-SDK. 3、Code Composer Studio （CCS），下载地址：https://software-dl.ti.com/ccs/esd/documents/ccs_downloads.html, 如果是在MacOS上进行开发，建议下载9.20版本，原因后面解释。 4、Uniflash，下载地址http://www.ti.com/tool/UNIFLASH. 二、RTLS1、RTLS系统框架 定位系统包含4部分：Node Manager，Master，Slave，Passive。Node Manager是运行在PC端的软件（第四小节第五小节介绍），CC26x2R开发板扮演Master，Slave，Passive角色（第二小节介绍）。 关于Master，Slave，Passive详细介绍可以参照官网说明，以下只做简要的介绍： &#10084; Master 与Slave端建立连接，并且讲连接链路的参数（地址信息，时钟精度，CRC等）传递给PC端。 与外围设备通过BLE链路分享AoA参数。 进行I/Q采样。 向Slave端发送指令，使得Slave端发送AoA packets。 &#10003; Slave 在BLE协议中扮演外围设备。 通过CTE发送AoA packets到Master端。 &#9728; Passive 可以通过CTE接收数据包，进行I/Q采样。 监听Master和Slave之间的连接链路。 2、硬件程序编译打开CCS，分别导入已经下载好的SDK（simplelink_cc13x2_26x2_sdk_3_40_00_02/examples/rtos/CC26X2R1_LAUNCHXL/ble5stack/）中的rtls_master, rtls_passive,rtls_slave 三个例程。 编译完成之后，在工程文件夹目录下的Debug目录下，会生成.out和.hex的文件，这两个文件选其一即可，使用UniFlash烧录到硬件中。 3、程序烧录将Boards通过USB串口连接到PC端，UniFlash会自动检测到设备以及相应的端口号，然后start，找到刚刚生成的.out文件，Load Image完成烧录。（依次将rtls_master, rtls_passive,rtls_slave 三个例程编译产生的.out文件烧录到Boards中） 4、运行可视化 DemoTI在最新的SDK中为开发者提供了可视化的UI界面，使得开发更加友好。TI也保留了以前的命令行操作，对于我这种小白来说，一开始入手，还是先选择可视化的UI界面。 在终端中输入以下指令： cd /Applications/ti/simplelink_cc13x2_26x2_sdk_3_40_00_02/tools/ble5stack/rtls_agent/rtls_ui chmod 777 rtls_ui_macos rtls_ui_macos 运行后，在电脑的默认浏览器中就会打开UI界面： 系统并没有识别出开发板，并且显示开发板不可用”N/A”。这是因为我们在使用CCS编译程序时，CCS会自动检测并更新XDS110固件的版本，打开终端，输入如下指令： cd /Applications/ti/ccs920/ccs/ccs_base/common/uscif/xds110 xdsdfu -e 使用xdsdfu工具查看固件版本是3.0.0.7，这个问题困扰了我很久，我在TI E2E论坛上找到了类似问题https://e2e.ti.com/support/wireless-connectivity/bluetooth/f/538/p/875870/3243366，我推测这个问题是和操作系统以及固件版本有关。在Windows上，开发板的固件版本即使在3.0.0.7，也依然可以被系统识别；但是在MacOS上，最新的固件版本则不可以支持，所以需要讲固件版本恢复到之前的老版本，所以这也为什么是在开头的时候，我建议大家下载CCS9.2，而不是下载最新的CCS，在CCS9.2中，我们可以使用xdsdfu工具将固件恢复到3.0.0.5。 xdsdfu -m xdsdfu -f firmware.bin -r 然后再使用xdsdfu -e 来查看现在的固件版本， 之后，重新运行可视化命令，Get Start后，自动识别PC连接的开发板，并显示开发板的属性： 5、运行非可视化Demoa、创建python虚拟环境 cd /Applications/ti/simplelink_cc13x2_26x2_sdk_3_40_00_02/tools/ble5stack/rtls_agent/ python3 -m venv .venv 在当前目录下，新建了一个.venv文件，此文件是隐藏文件夹，使用快捷键”shift+command+.”查看。 source .venv/bin/activate 然后，打开package.sh，将第三行的代PYTHON3=python3.7修改为PYTHON3=python 在终端继续运行以下命令： package.sh -c -b -u -i 然后在当前目录下新建requirements.txt， 打开txt，输入以下内容， construct==2.9.45 websockets==7.0 pyserial==3.4 requirements.txt存储的是python的外部依赖包名称，然后使用pip进行安装， python -m pip install -r requirements.txt 这里，如果下载失败，就重新下载几次，直到成功为止。 打开examples目录下的rtls_example_with_rtls_util.py文件，找到定义设备端口号的地方，并修改 devices = [ {\"com_port\": \"/dev/cu.usbmodemL1100ABP1\", \"baud_rate\": 460800, \"name\": \"CC26x2 Master\"}, {\"com_port\": \"/dev/cu.usbmodemL1100ADL1\", \"baud_rate\": 460800, \"name\": \"CC26x2 Passive\"}, ] 然后，在终端中继续运行以下指令： python -u examples/rtls_example_with_rtls_util.py 然后，可以在终端中就可以查看打印的日志信息了。 三、TI CloudCCS+SDK+UniFlash一共大约3.5G，并且CCS编译程序时所占用的内存资源很大，如果有同学电脑存储资源有限，不想下载这么大的开发工具，可以选择TI Cloud云开发工具，集成了CCS，UniFlash等开发工具以及Resource Explorer等资源库，可以满足一些基本的硬件开发。详见https://dev.ti.com/. 关于开发板的其他功能开发，将在后面章节会继续详解。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://fyhaha.github.io/categories/学习笔记/"}],"tags":[{"name":"CC26x2R","slug":"CC26x2R","permalink":"https://fyhaha.github.io/tags/CC26x2R/"},{"name":"RTLS","slug":"RTLS","permalink":"https://fyhaha.github.io/tags/RTLS/"}]},{"title":"Spring Boot学习笔记1：使用IntelliJ IDEA创建基于Spring Boot的Maven项目","slug":"Spring-boot-basedon-maven","date":"2020-03-20T13:03:57.000Z","updated":"2020-08-24T13:55:50.767Z","comments":true,"path":"2020/03/20/Spring-boot-basedon-maven/","link":"","permalink":"https://fyhaha.github.io/2020/03/20/Spring-boot-basedon-maven/","excerpt":"","text":"1、开发环境 IntelliJ IDEA ver2019.3.2 （money购买正版/高校邮箱免费申请使用/破解工具/30天免费使用） Maven ver3.6.3 Spring Boot ver2.2.4 Release Java SE JDK ver13.3.2 2、创建Maven项目1、关于IDEA的个人化配置，可以参照https://blog.csdn.net/m_m254282520/article/details/78900238 2、打开IntelliJ IDEA-&gt; Create New Project。 3、Maven-&gt;Project SDK-&gt;Create from archetype-&gt;webapp： 4、设置name, groupID, artifactID，如果有需要的话可以自定义User settings file和Local respository路径，这里的路径都是默认的路径，setting.xml是maven的配置文件，local repository存储的是项目所依赖的所有jar包。当项目所依赖的包不在local repository中，IDEA会自动下载依赖包到local repository中，可以理解为一个公共的资源池，对于所有新建的maven项目共享资源池中的资源。然后一路傻瓜式操作即可。 环境配置 5、创建完毕后，需要加在所需的依赖包，但是有时候会存在依赖包久久不能下载成功的现象，之前我下了一个下午，一直没能下载成功，可能是因为这些资源有部分需要连接到国外的资源网站进行下载，所以带宽被限制。解决方法是，打开project structure-&gt;Maven-&gt;open settings.xml 添加以下代码，使用阿里云镜像来进行下载所依赖的jar包。 &lt;mirrors> &lt;mirror> &lt;id>alimaven&lt;/id> &lt;name>aliyun maven&lt;/name> &lt;url>http://maven.aliyun.com/nexus/content/groups/public/&lt;/url> &lt;mirrorOf>central&lt;/mirrorOf> &lt;/mirror> &lt;/mirrors> 由于这里修改的是IDEA内置的Maven框架的全局settings配置文件，所以以后再使用IDEA创建新项目，下载依赖包时都可以体验飞起的感觉。如果要使用外置的Maven框架，则需要重新执行步骤5。 6、打开pom.xml，添加所需要的包依赖： &lt;parent> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-parent&lt;/artifactId> &lt;version>1.5.6.RELEASE&lt;/version> &lt;/parent> &lt;dependencies> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-web&lt;/artifactId> &lt;/dependency> &lt;/dependencies> 添加完毕，重新加载，双击项目，project structure-&gt;maven-&gt;reimport。 在左侧项目结构src-&gt;main中添加java文件夹，创建完毕后，双击java文件夹，选择Mark Directory AS，设置Sources Root，这一步骤是要告诉IDEA，这个文件夹下所包含的文件，在构建工程时，需要作为一部分编译进去。 左侧项目结构src-&gt;main中添resource文件夹，同样，选择Mark Directory AS，设置Resources Root，表示这是应用所依赖的资源文件。 之后，在java目录下，创建package：com.springbootcourse.springbootcourse1。在新建的package目录下，创建SpringbootCourse1.java，@SpringBootApplication是表示这个类为项目的启动类。 @SpringBootApplication public class SpringbootCourse1 { public static void main(String[] args) throws Exception { SpringApplication.run(SpringbootCourse1.class, args); } } 然后在package目录下创建controller文件夹，并在其目录下新建HelloController.java，关于@RequestMapping注解的相关知识，可以参考：https://www.oschina.net/translate/using-the-spring-requestmapping-annotation @Controller public class HelloController { @RequestMapping(\"/\") @ResponseBody String index() { return \"Hello World! haha\"; } } 执行上述操作后，项目架构如下图所示： 7、编辑启动配置，上方菜单栏中run-&gt;edit configurations, 8、大功告成，运行项目， 在浏览器端打开http://localhost:8080/ 检查是否出现”Hello World! haha”字符。 3、其他1、如果在编译过程中，出现端口被占用的情况，如下所示： 打开终端，输入lsof -i tcp:8080，查看8080端口是否被占用，然后根据PID(进程id)杀掉占有的进程即可，然后重新运行。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://fyhaha.github.io/categories/学习笔记/"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://fyhaha.github.io/tags/Spring-Boot/"},{"name":"Maven","slug":"Maven","permalink":"https://fyhaha.github.io/tags/Maven/"},{"name":"IntelliJ IDEA","slug":"IntelliJ-IDEA","permalink":"https://fyhaha.github.io/tags/IntelliJ-IDEA/"}]},{"title":"CSI误差(SFO+CFO+PDD+etc...)简介","slug":"error-of-CSI","date":"2019-11-02T03:13:03.000Z","updated":"2020-08-24T13:55:50.795Z","comments":true,"path":"2019/11/02/error-of-CSI/","link":"","permalink":"https://fyhaha.github.io/2019/11/02/error-of-CSI/","excerpt":"","text":"近期由于文章和任务需要，需要对CSI测量的误差进行分析，借鉴了几篇目前顶刊文章，进行了一个简单的整理。这里只是从表层上进行了一个介绍，由于作者也是近期刚刚接触，也有很多不明白的地方，如有问题，请随时联系作者，共同学习和进步。 一、线性误差1、Packet detection delay/packet boundary delay 由于OFDM系统接受端在接受packet时，分组到达接受端后并不会立即被接受端接受，接受端会进行能量检测，当能量到达一定阈值，才会开始接受接下来的分组。同一信道下，多组CSI数据包对应的PDD，符合高斯分布。也就是说，在特定信道中收集多个CSI数据包，然后对这些CSI数据包求平均，所得到的平均CSI就可以消除PDD。注意，这里对于每次测量所得到的CSI包的PDD都不一样，也就是说多组测量中的CSI包的PDD虽然不一样，但是符合高斯分布。 2、Sampling frequency offset 接受端和发送端之间由于时钟不同步而导致采样频率不同，所以会导致SFO，SFO和PDD不同，消除起来比较麻烦。对于不同信道中的CSI包，他们所对应的SFO都是相同的，只要发送端和接收端的采样频率不变，那么SFO就不会改变。 3、Carrier frequency offset 这部分误差和硬件相关，但是只会影响CSI的幅值，并不会影响相位。 4、其他 PA、PLL、PAU等等，不作为主要影响因素，不再一一介绍 二、非线性误差非线性误差主要是由于I/Q imbalance而引起。非线性误差对于不同的频带、不同的子载波都是不同的。 文献参考： [1] Precise Power Delay Profiling with Commodity WiFi Yaxiong Xie, Zhenjiang Li, Mo Li(主要介绍了如何消除线性误差) [2] Identifying Non-linear CSI Phase Measurement Errors with Commodity WiFi Devices Yiwei Zhuo, Hongzi Zhu, Hua Xue (主要介绍了什么是非线性误差) [3] Perceiving Accurate CSI Phases with Commodity WiFi Devices Yiwei Zhuo, Hongzi Zhu, Hua Xue1, Shan Chang (主要介绍了如何消除线性误差和非线性误差)","categories":[{"name":"无线信号","slug":"无线信号","permalink":"https://fyhaha.github.io/categories/无线信号/"}],"tags":[{"name":"WiFi","slug":"WiFi","permalink":"https://fyhaha.github.io/tags/WiFi/"},{"name":"CSI误差分析","slug":"CSI误差分析","permalink":"https://fyhaha.github.io/tags/CSI误差分析/"}]},{"title":"Mac和Windows系统中ssh密钥的生成和共享","slug":"sshkey-mac-windows","date":"2019-11-02T02:43:53.000Z","updated":"2020-08-24T13:55:50.808Z","comments":true,"path":"2019/11/02/sshkey-mac-windows/","link":"","permalink":"https://fyhaha.github.io/2019/11/02/sshkey-mac-windows/","excerpt":"","text":"1、Windows环境下获得公钥和私钥（1）安装git，从程序目录打开 “Git Bash” （2）在Git Bash控制台上输入：ssh-keygen -t rsa ，这时候会让你输入passphrase，直接点击enter键即可。 （3）在控制台上会显示私玥和公钥的保存位置 (id_rsa,就是私钥文件，id_rsa.pub就是公钥文件）。 2、Mac环境下获得公钥和私钥由于Mac OS一般都自带了git环境，所以直接打开控制台，输入ssh-keygen -t rsa，一路回车到底即可。然后文件会存储到 ～／.ssh文件夹中，打开Finder，快捷键command+G+↑，输入～／.ssh即可前往。 3、Windows端和Mac端共享私玥当我们即想用Windows也想用Mac端来访问服务器，但是因为某些方面原因，每个人只能提交一个设备的私玥信息，那么应该如何将Windows和Mac进行私玥共享呢？ （1）首先将windows环境下的私钥文件拷贝到Mac上，保存到桌面上即可，文件名为id_rsa （2）在Mac端打开控制台，输入cd ~/.ssh （3）cp ~/Desktop/id_rsa id_rsa //将私玥文件拷贝到指定目录的文件下 （4）ssh-add -K ~/.ssh/id_rsa //导入私钥 （5）一路enter到底即可 到此，就可以完成了共享私钥操作，在mac端打开XQuarts，然后在终端输入 ssh -X {username}@{IP地址},即可访问远程服务器。在Windows端可以使用MobaXterm等工具进行连接。😎","categories":[{"name":"ssh连接","slug":"ssh连接","permalink":"https://fyhaha.github.io/categories/ssh连接/"}],"tags":[{"name":"ssh密钥","slug":"ssh密钥","permalink":"https://fyhaha.github.io/tags/ssh密钥/"}]},{"title":"Blog搭建过程中的问题解决","slug":"some-problems-in-blog-solved","date":"2019-08-31T01:28:49.000Z","updated":"2020-08-24T13:55:50.800Z","comments":true,"path":"2019/08/31/some-problems-in-blog-solved/","link":"","permalink":"https://fyhaha.github.io/2019/08/31/some-problems-in-blog-solved/","excerpt":"","text":"之前基于Hexo的matery模板搭建了一个个人博客(搭建教程详见另一篇博客：(https://hanfeiyu.com/2019/08/27/start-my-blog/)，在后期完善过程中，遇到了许多这样那样的问题，所以专门写了一篇博客记录下来，此篇博客将在后期不定时更新（每遇到问题时😀）。 一、个性化定制1、使用Gittalk插件时，点击GitHub登录，网站跳转失败问题在博客文章下面添加评论模块，hexo-theme-matery模板中已经提供了gitalk接口，很方便我们直接调用。我们要在GitHub中创建一个应用：https://github.com/settings/applications/new 创建之后，会出现clienIdhe clientSecret信息： 打开D:\\MyBlog\\themes\\hexo-theme-matery\\ _config.yml， gitalk: enable: true owner: FyHaHa ##GitHub 的用户名 repo: fyhaha.github.io # 前文建立的repository名称 oauth: clientId: clientSecret: admin: FyHaHa ##GitHub 的用户名 然后 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 但是，你会发现当你点击GitHub登陆时，总会跳转到博客主页，这是为什么呢？韩先森一开始也百思不得其解，最后查阅资料知道，我们在创建repository 时，勾选了Enforce HTTPS（下图）选项，所以导致每当我们点击GitHub登陆时，总是寻址都寻不到正确的网址，不得已才会回调到我们博客。 所以我们应该在GitHub创建应用时，应该将网址前缀修改为https， 这样，就可以正常登录GitHub进行评论了。 2、修改主题配色如果你想要修改主题配色，需要对源代码进行修改，打开主题文件夹目录下的source\\css\\matery.css，找到 @-webkit-keyframes rainbow { 0%, 100% { background: rgba(); background: linear-gradient(); background: -moz-linear-gradient(); background: -webkit-linear-gradient(); } 16% { background: rgba(); background: linear-gradient(); background: -moz-linear-gradient(); background: -webkit-linear-gradient(); } ...... } @keyframes rainbow { } 对CSS语言不熟悉的同学看到这里可能就有一丝丝蒙蔽了，没关系，不熟也没关系。为什么rainbow前缀为何要加上@-webkit-keyframes , @keyframes ,因为不同浏览器的内核不同，这样做的目的就是要支持不同内核的浏览器，所以@-webkit-keyframes rainbow 和 @keyframes rainbow 两个代码段的代码相同。linear-gradient()函数是实现渐变色的效果， linear-gradient(45deg, rgba(255, 160, 0, 0.75) 0%, rgba(255, 160, 0, 0.65) 100%); 上条指令的效果，便是从45度角的为止，开始渐变颜色，从rgb为(255,260,0)，透明度为0.75的颜色，渐变为rgb为(255,260,0)，透明度为0.65的颜色。 background: -moz-linear-gradient(); /*for FireFox*/ background: -webkit-linear-gradient(); /*for Safari and Chrome*/ 表示支持不同内核的浏览器的渐变函数。 然后根据你的个人喜好，合理的搭配颜色即可。 主题颜色配好之后，如果还想配置其他控件的颜色或者其他属性，可以在 .bg-color { /*修改导航栏颜色*/ } .progress-bar { /*修改页面底部进度条的属性：大小、颜色等*/ } header .brand-logo .logo-img { /*修改Logo大小、位置*/ } 更多控件属性均可以在matery.css中进行修改，等待着你的发现！ 二、博客发布1、图片上传失败这点是自己在做测试时发现的，在写博客的时候，有时候如果图片尺寸过大，容易造成上传不成功，这时候就需要对图像进行压缩后上传。 2、不支持某些特定字符在写博文时，不知道你有木有遇到以下问题： 错误提示是在_post\\some-problems-in-blog-solved.md中，出现错误，定位在line 2 colume 4， ERROR Process failed: _posts/some-problems-in-blog-solved.md YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 2, column 4: top: false 但是，我回到.md文件中查看，发现并没有什么语法错误。 百思不得其解，结果后来发现，是因为我在标题使用了[ ] 字符，将[ ]删除后，即可正常运行。 3、变量定义冲突错误信息： ERROR Process failed: _posts/some-problems-in-blog-solved.md YAMLException: duplicated mapping key at line 8, column 1: cover: false ^ 表示有变量定义冲突，查看_posts\\some-problems-in-blog-solved.md文件，发现cover变量重复定义。 4、文章加密通过安装hexo-blog-encrypt插件来实现文章的加密，需要注意以下问题：","categories":[{"name":"网站搭建","slug":"网站搭建","permalink":"https://fyhaha.github.io/categories/网站搭建/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://fyhaha.github.io/tags/博客搭建/"}]},{"title":"完整教程:(低成本快速)手把手教你搭建基于hexo+GitHub的个人博客","slug":"start-my-blog","date":"2019-08-27T13:24:26.000Z","updated":"2020-08-24T13:55:50.808Z","comments":true,"path":"2019/08/27/start-my-blog/","link":"","permalink":"https://fyhaha.github.io/2019/08/27/start-my-blog/","excerpt":"","text":"最近，韩先森即将迎来开学，于是就想利用开学之前的这段日子做些小玩意，比如搭建一个个人博客出来，心动不如行动，那就开始做吧。我之前对网站搭建也有一定的了解，但是仅限于了解，基本上和小白差不多。这不，前前后后折腾了3天的时间才将网站搭了出来，搭建过程中，也就是购买域名的时候花了点RMB，总体成本是55元（当然除去人力成本和时间成本这些哈&lt;–&gt;）。网站能够搭建出来也要感谢godweiyang的支持（ https://godweiyang.com ），godweiyang这篇博客已经写的很详细了，但自己在搭建过程中依然遇到这样那样的问题，所以结合自身的实际情况，来写这篇博客。所以想要拥有个人博客，并且没有任何网站搭建经验并且还想省钱的同学，那么这篇博客绝对不辜负你的期望，话不多说，我们开始挽起袖子，加油干！ 一、准备工作首先，你需要在拥有一台电脑(废话)，然后在电脑上安装: Node.js Git hexo 除此之外，你应该还需要在GitHub上注册一个账号，如果你没有的话。 这里我就直接使用实验室配的电脑来进行搭建，操作系统是Windows 10. 1、Node.js安装下载地址：https://nodejs.org/en/ 下载成功后，直接一路傻瓜式安装即可。安装完成后，打开终端（ Win+R，然后输入cmd ），输入指令: node -v npm -v如果出现关于node.js的版本号之后(下图)，就证明这一步已经成功了，开始下一步。 2、Git安装下载地址：https://git-scm.com/downloads 下载成功后，安装时基本上都选择默认选项即可，有人可能问，Git这种命令行工具是不是必须安装到C盘才可以，其实是不需要的，包括上面的Node.js安装位置，这里韩先森将他们都统一安装到了我的软件盘:D盘（个人习惯）。然后你在桌面左下角搜索栏中输入Git，如果出现Git bash图标，那么恭喜你，这一步也完成了。 3、GitHub准备工作首先需要在GitHub上申请一个账号（这一步可以直接参照官网指导），然后新建一个repository ： （ 将 Initialize this repository with a README 这项也打上勾 ） 注意这里repository name格式一定是 username.github.io ，（username就是你github的用户名，比如韩先森的用户名是fyhaha，所以repository name就是fyhaha.github.io ）否则网站会出现404或者导致网页显示不正常。 创建完成后，打开你所创建的项目，点击setting-&gt;GitHub Pages -&gt; change theme--&gt;select theme,具体流程可以参照下图： （这个模块要在settings的最下面，不是很容易找到 ） 操作完之后，我们返回GitHub Pages 发现变成了这个样子：（由于hanfeiyu.com是我已经注册的域名，所以显示这个，按照流程正常操作之后，应该是 http://github.com/username/username.github.io ） 4、hexo从这里开始，我们就需要将Git Bash工具引上舞台了，我在D盘（是我的存储盘，因人而异哟，在其他盘建立也无碍）目录下新建了一个文件夹MyBlog，然后再MyBlog文件夹中，右击鼠标，打开git Bash，然后输入指令： npm install -g hexo-cli 这一步下载的时候可能会很慢，耐心等待一会或者使用国内镜像源来下载： npm install -g cnpm --registry=https://registry.npm.taobao.org cnpm install -g hexo-cli 使用 指令 hexo -v 来检查hexo是否安装成功，出现下图则说明安装成功。 然后输入以下命令: hexo init //初始化文件夹，这一步操作主要是从Github上下载hexo相关文件 npm install //下载相关组件，指令执行后，会发现所在的文件目录下多了一个node_modules的文件夹 //至此，网站在本地的配置工作也完成了，那么接下来就可以先将网页部署在本地上了 hexo g //生成静态网页文件，操作完成后，目录下又会多出一个public文件夹。这里面就是存储生成的所有静态网页文件。 hexo s //将网页文件部署到本地 然后打开浏览器，输入https://localhost:4000 ，就可以看到以下激动的画面: 这就说明，你已经成功的在本地搭建了一个基于hexo的网站，但是先着急，还有更激动的事情呢…… 网站光部署在本地是不够的，因为你部署在本地就能只供自己在自己的电脑上访问，那就不算做是网站。接下来我们就要将它部署到GitHub上，可以使得全球的互联网用户来访问。 到此为止，我们前期的所有工作均已准备就绪。那么接下来我们就开始正式进入搭建过程！ 二、网站的搭建1 、本地与GitHub连接结束上文的操作后，我们需要将本地（你的电脑）与GitHub通过ssh连接起来，因为这样，你才能将本地的生成的网页静态文件，部署到GitHub服务器上。 依然在我们1.4节中所建立的D:\\MyBlog文件夹中，打开Git Bash，然后输入以下指令： git config --global user.name \"FyHaHa\" //\"FyHaHa\" 替换成你自己的GitHub用户名，不区分大小写 git config --global user.email \"fyhancs@gmail.com\" //\"fyhancs@gmail.com\" 替换成你在GitHub注册的邮箱 利用Git来生成本地的ssh key ssh-keygen -t rsa -C \"fyhancs@gmail.com\" 如果本地上已经存在了id_rsa文件，输入y，直接替换。然后连续两个回车，便可以生成密钥文件。 cat ~/.ssh/id_rsa.pub 查看密钥信息： 然后在Github中，点击头像下面的settings–&gt;SSH and GPG keys，新建一个ssh，将密钥信息复制到框中，然后保存。 输入以下指令，如果出现你的GitHub用户名，那就证明连接成功！ ssh -T git@github.com 2、网站配置OK ，然后我们对hexo进行环境配置。在进行环境配置之前，先让大家了解一下hexo的结构。经过以上步骤后，在D:\\MyBlog\\的目录中会存在以下文件夹以及文件： node_modules: #存储的是hexo的各种组件或者第三方插件，这个文件夹中的文件一般不需要我们去修改。 public: #当在本地进行调试时，所生成的网页静态文件存储于此，这个文件夹中的文件也不需要我们去修改。 scaffolds: #这里面有post.md,draft.md,page.md这三个文件，可以将他们看成模板文件，比如post.md就是文章的模板，里面定义了文章日期、是否置顶等属性。 source: #存储文章等资源文件。 theme: #存储网站的主题模板。 _config：#网站的配置文件。 我们要做的是打开_config.yml文件，对网站的属性进行配置，比如：网站名称、logo等等（可以根据个人需要来进行修改)。这里我们只针对网站部署模块进行修改： # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repository: https://github.com/username/username.github.io.git //网站的静态文件将会部署在这里，username是GitHub的用户名，记得替换 branch: master 这样，就完成了网站在GitHub上的部署。 还是在Git Bash中输入 hexo clean hexo g hexo d //完成部署操作 然后在打开浏览器，输入https://username.github.io ，你就可以看到： 3、创建第一篇博客还是在上文一直使用的Git bash中，输入 hexo new post \"my_artical\" 这样就在D:\\MyBlog\\source\\_posts中创建了一个my_artical.md文件，然后用编辑器打开，你就可以随心所欲的在里面发挥你的创作才能了。创作完毕后，在打开的Git Bash中输入： hexo clean hexo g hexo d //完成部署操作 这样你就可以在https://username.github.io 中看到你的文章了，开心不开心，激动不激动。 到这里，个人博客基本上就搭建完毕，以后你就可以在https://username.github.io 随心所欲的发表你的文章了。 But！但是你如果想让博客用自己的个性化域名而不是用Github提供的默认域名，比如廖雪峰老师的liaoxuefeng.com这种看起来很有牌面的域名，应该怎么办呢，请接着看。 4、绑定个人域名首先要在域名代理商那里购买域名，网上很多人说域名最好买国外的，有很多好处，不如不需要备案，便宜等等。但是我们的域名仅是用于个人博客用，再加上我们使用了GitHub的服务器，所以我个人建议，就直接在阿里云上购买即可。主要有以下几点优点： 因为我们只是购买了域名，而没有使用阿里云的服务器，所以不需要进行繁琐的备案。但是域名购买需要实名认证，认证之后，很快就可以直接解析使用，我从认证到购买成功再到解析成功的过程，不到一小时就完成了。当然，我也不排除我是因为巧合，因为网上依然是有人在吐槽阿里云的认证速度。 我对比了国内的阿里云、腾讯云、百度云，以及国外的namecheap、GoDaddy这些域名代理商，发现国内平台的域名更加便宜一些，并且付款手续简单，直接支付宝或者微信即可，国外的域名注册平台支持银联卡操作，大多不支持支付宝微信付款方式。 在阿里云购买之后，等到域名状态从serverhold变为正常后，就可以进行解析了： 解析成功后，在你的GitHub上项目中，进入settings-&gt;Github Pages，在Custom domain中填写你的专属域名，注意，我这里没有带www，这样别人就可以直接在浏览器中输入hanfeiyu.com就可以访问我的博客了，要不然，别人在访问你的时候，必须要输入&lt;www.hanfeiyu.com&gt; 才可以访问。然后save之后，你会在你的repository中发现多了一个CNAME的文件，然后再在D:\\MyBlog\\source\\目录下新建一个CNAME文件（没有后缀）,在里面填写上你的专属域名hanfeiyu.com，保存。 这样，别人就可以使用你的专属域名来访问你的个人博客了。 5、添加主题如果你认为hexo默认的主题不符合你的气质,你可以自己到hexo官网上寻找一个适合你的主题风格。这里韩先森使用的是 hexo-theme-matery主题 (https://github.com/blinkfox/hexo-theme-matery )。将主题问价下载解压之后，放在D:\\MyBlog\\theme目录下，然后打开D:\\MyBlog\\_config.yml，修改theme属性： hero-theme-matery提供了很多个性化功能的接口，比如：响应式设计、自定义界面、文章置顶、评论等，用户如果想使用某个功能，只需要在配置文件中进行配置即可。更多的精彩功能详见： https://github.com/blinkfox/hexo-theme-matery 这是我基于hero-theme-matery主题搭建的博客网站 ( https://hanfeiyu.com ) 效果展示图： 6、实现下载功能如果我们有一份源代码，想在网站上提供下载链接，只需要以下几步即可。 这里我新建一份新的博客，命令test，使用hexo new post “test”指令后会得到一个test文件夹河test.md文件： 然后将希望下载的文件，比如说21.pdf文件，放入test文件夹下。 在test.md中，编写： 然后，编译运行之后，便可以成功！ 三、多台设备同步更新网站但是，如果我想要发布博客，或者对网站功能进行优化升级，就只能通过实验室的电脑进行操作，因为网站的环境配置文件和代码都保存在电脑本地端。如果我有事情要外出出差个两周，在出差这段时间我有好的idea想要发布在博客上，应该怎么办呢？那么接下来我就教大家如何在多台电脑上发布和维护博客。 1、代码备份到GitHub上首先，需要在GitHub上新建一个repository ,名，命名为myblog_hexo，如果你不想让别人访问你的项目，可以设置为private： 我们接下来就将我们在本地的网站源码上传到myblog_hexo中，打开D:\\MyBlog，在MyBlog目录下打开Git Bash工具，输入： git clone https://github.com/fyhaha/myblog_hexo //将GitHub中新建的myblog_hexo下载到本地中 然后你会发现在你的MyBlog文件夹中多了一个myblog_hexo的文件夹，进入myblog_hexo目录下，找到.git文件夹。有的同学可能进入myblog_hexo目录后 ，没有发现这个.git文件夹，这是因为.git文件默认是隐藏的，所以我们需要将隐藏的文件显示出来： 然后，将.git移到MyBlog文件夹目录下，在Git Bash工具中输入： git add -A git commit -m \"xxxxx\" // 引号内的xxxx可以随便写 git push 执行完之后，本地的代码就会上传到GitHub新建的myblog_hexo中。接下来你就可以在另一台电脑上进行网站的运营和维护了。 2、在另一台设备上创建发布博客这里我要在一台从来没有配置过博客环境的MacBook上进行操作示范，首先，要确保Mac上安装了Node.js hexo Git(一般Mac上都会自带Git环境)，如果没有的话，自行参照上文第一章进行安装。然后还要将Mac和GitHub连接，如同我们2.1中所介绍，将Mac的ssh key保存到GitHub中即可。 Mac生成ssh密钥方式和windows相似，打开终端，输入ssh-keygen -t rsa，一路回车到底即可。然后使用 cat ~/.ssh/id_rsa.pub 来查看密钥。将密钥信息拷贝到GitHub中保存即可（操作同2.1节）。 连接成功后，新建MyBlog文件夹，打开终端，进入你所新建的文件夹中，然后使用Git指令将你在GitHub上的myblog_hexo项目下载到本地： cd /Users/freddy/Documents/MyBlog git clone https://github.com/fyhaha/myblog_hexo 然后进入myblog_hexo目录下，进行安装hexo必要组件， cd myblog_hexo npm install OK,到这里，你就可以在Mac上创建你的博客， hexo new post \"lalala\" 然后对它进行编辑，编辑完成后，通过hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 将博客部署到GitHub服务器上，然后在浏览器中就可以看到你新发布的博客了。注意，当你完成之后发布之后，别忘了将你修改后的文件上传到GitHub上， git add -A git commit -m \"xxxx\" git push 注意 如果你之前已经在某台电脑上创建发布过博客，那么再使用这台电脑进行发布博客时，就不需要再进行上述那么麻烦的同步工作了，这就得益于GitHub的强大功能了。以我实验室的电脑为例，倘若我经过上述步骤后，在Mac上成功发布了一篇博客，现在我又要用我实验室的电脑（也就是最初我用来搭建网站的电脑）来再次发布一篇博客，那么我需要在D:/MyBlog目录下使用Git Bash工具执行： git pull //将GitHub上的代码更新到本地 这样可以保证我在Mac上对网站内容所作的修改，同步更新到我本地。然后就可以按照上文所讲的步骤进行疯狂的各种操作，但别忘记了操作完之后，需要将本地修改后的网站内容上传至GitHub，确保网站的实时同步更新。 四、问题以及解决1、使用gitalk插件实现评论在博客文章下面添加评论模块，hexo-theme-matery模板中已经提供了gitalk接口，很方便我们直接调用。我们要在GitHub中创建一个应用：https://github.com/settings/applications/new 创建之后，会出现clienIdhe clientSecret信息： 打开D:\\MyBlog\\themes\\hexo-theme-matery\\ _config.yml， gitalk: enable: true owner: FyHaHa ##GitHub 的用户名 repo: fyhaha.github.io # 前文建立的repository名称 oauth: clientId: clientSecret: admin: FyHaHa ##GitHub 的用户名 然后 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 但是，你会发现当你点击GitHub登陆时，总会跳转到博客主页，这是为什么呢？韩先森一开始也百思不得其解，最后查阅资料知道，我们在创建repository 时，勾选了Enforce HTTPS（下图）选项，所以导致每当我们点击GitHub登陆时，总是寻址都寻不到正确的网址，不得已才会回调到我们博客。 所以我们应该在GitHub创建应用时，应该将网址前缀修改为https， 这样，就可以正常登录GitHub进行评论了。 2、图片上传失败这点是自己在做测试时发现的，在写博客的时候，有时候如果图片尺寸过大，容易造成上传不成功，这时候就需要对图像进行压缩后上传。 …… ( 此部分将在另外一篇文章中持续更新！) 以上就是我搭建的全部过程，如果同学你在过程中依然存在某些问题，可以在底下评论，或者E-mail我都可以，联系方式，可以见博客的“关于”。","categories":[{"name":"网站搭建","slug":"网站搭建","permalink":"https://fyhaha.github.io/categories/网站搭建/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://fyhaha.github.io/tags/博客搭建/"},{"name":"hexo","slug":"hexo","permalink":"https://fyhaha.github.io/tags/hexo/"}]}],"categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://fyhaha.github.io/categories/学习笔记/"},{"name":"无线信号","slug":"无线信号","permalink":"https://fyhaha.github.io/categories/无线信号/"},{"name":"ssh连接","slug":"ssh连接","permalink":"https://fyhaha.github.io/categories/ssh连接/"},{"name":"网站搭建","slug":"网站搭建","permalink":"https://fyhaha.github.io/categories/网站搭建/"}],"tags":[{"name":"CC26x2R","slug":"CC26x2R","permalink":"https://fyhaha.github.io/tags/CC26x2R/"},{"name":"RTLS","slug":"RTLS","permalink":"https://fyhaha.github.io/tags/RTLS/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://fyhaha.github.io/tags/Spring-Boot/"},{"name":"Maven","slug":"Maven","permalink":"https://fyhaha.github.io/tags/Maven/"},{"name":"IntelliJ IDEA","slug":"IntelliJ-IDEA","permalink":"https://fyhaha.github.io/tags/IntelliJ-IDEA/"},{"name":"WiFi","slug":"WiFi","permalink":"https://fyhaha.github.io/tags/WiFi/"},{"name":"CSI误差分析","slug":"CSI误差分析","permalink":"https://fyhaha.github.io/tags/CSI误差分析/"},{"name":"ssh密钥","slug":"ssh密钥","permalink":"https://fyhaha.github.io/tags/ssh密钥/"},{"name":"博客搭建","slug":"博客搭建","permalink":"https://fyhaha.github.io/tags/博客搭建/"},{"name":"hexo","slug":"hexo","permalink":"https://fyhaha.github.io/tags/hexo/"}]}